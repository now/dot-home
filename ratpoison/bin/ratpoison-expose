#! /bin/zsh
# contents: Exposé script for the ratpoison(1) window-manager.
#
# Copyright © 2005 Nikolai Weibull <nikolai@bitwi.se>

zmodload zsh/mathfunc

RATPOISON=ratpoison
N_LIMIT=2
LIMIT=0.01

rp-call () {
  $RATPOISON -c $*
}

rp-call-interactive () {
  $RATPOISON -i -c $*
}

ratio () {
  integer n=$1 r=1
  float t
  
  (( t = $4 / float($5) ))

  for ((i = 2; i <= n; i++)); do
    if ((n % i == 0 && abs(i ** 2 / float(n) - t) < abs(r ** 2 / float(n) - t))); then
      (( r = i ))
    fi
  done

  case $# in
    (6) (( $6 = abs(r ** 2 / float(n) - t) )) ;;
    (7) (( $6 = r, $7 = n / r )) ;;
  esac
}

box-split () {
  integer n=$1 rx=$2 ry=$3 rw=$4 rh=$5 rw_rem rh_rem rows columns

  ratio $* rows columns

  (( rw_rem = rw % n, rw -= rw_rem ))
  (( rh_rem = rh % n, rh -= rh_rem ))

  for ((i = 1; i <= rows; i++)); do
    for ((j = 1; j <= columns; j++)); do
      integer x y dx dy
      (( x = rx + (j - 1) * rw / columns, y = ry + (i - 1) * rh / rows ))
      (( dx = rw / columns + (j == columns ? rw_rem : 0) ))
      (( dy = rh / rows + (i == rows ? rh_rem : 0) ))
      print $x $y $dx $dy
    done
  done
}

recursive-split () {
  integer n=$1
  float proximity

  ratio $* proximity

  if (( n < N_LIMIT || proximity < LIMIT )); then
    box-split $*
  else
    integer rx=$2 ry=$3 rw=$4 rh=$5 nA k
    float x
    (( nA = n / 2.0 ))
    (( x = nA / float(n - nA) ))
    if (( rw > rh )); then
      (( k = rw * x / (x + 1) ))
      recursive-split $nA $rx $ry $k $rh
      recursive-split $((n - nA)) $((rx + k)) $ry $((rw - k)) $rh
    else
      (( k = rh * x / (x + 1) ))
      recursive-split $nA $rx $ry $rw $k
      recursive-split $((n - nA)) $rx $((ry + k)) $rw $((rh - k))
    fi
  fi
}

curframe=$(rp-call curframe)
window_ids=($(rp-call 'windows %i'))
old_frames=$(rp-call fdump)
dimensions=(${${(s: :)$(rp-call sdump)}[2,5]})
frames=()
integer i=0

for frame in "${(@f)$(recursive-split $#window_ids $dimensions)}"; do
  frame=($=frame)
  frames+="(frame :number $i :x $frame[1] :y $frame[2] :width $frame[3] :height $frame[4] :window $window_ids[i + 1])"
  (( i++ ))
done

rp-call "frestore ${(j:, :)frames}"
rp-call-interactive fselect
windows=($(rp-call 'windows %s %i'))
active_window=$windows[$windows[(i)\*]+1]
rp-call "frestore ${old_frames//(#b)(*\(frame :number $curframe *:window) [[:digit:]]## (*)/$match[1] $active_window $match[2]}"
