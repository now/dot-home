namespace a = 'http://relaxng.org/ns/compatibility/annotations/1.0'
default namespace pom = 'http://maven.apache.org/POM/4.0.0'
namespace xsi = 'http://www.w3.org/2001/XMLSchema-instance'

pom.any.element = element * { (attribute * { text } | text | pom.any.element)* }

xsi.schemaLocation = attribute xsi:schemaLocation { text }
xsi.noNamespaceSchemaLocation = attribute xsi:noNamespaceSchemaLocation { text }

start = pom.project

## The project element is the root of the descriptor.
div {
  pom.project = element project { pom.project.attributes, pom.project.content }

  div {
    pom.project.attributes =
      xsi.schemaLocation? & xsi.noNamespaceSchemaLocation?

    div {
      pom.project.attributes &=
        pom.project.attributes.child.project.url.inherit.append.path?
      pom.project.attributes.child.project.url.inherit.append.path =
        attribute child.project.url.inherit.append.path { text }
    }
  }

  pom.project.content =
    pom.modelVersion? &
    pom.parent? &
    pom.groupId? &
    pom.artifactId? &
    pom.version? &
    pom.packaging? &
    pom.name? &
    pom.description? &
    pom.url? &
    pom.inceptionYear? &
    pom.organization? &
    pom.licenses? &
    pom.developers? &
    pom.contributors? &
    pom.mailingLists? &
    pom.prerequisites? &
    pom.modules? &
    pom.scm? &
    pom.issueManagement? &
    pom.ciManagement? &
    pom.distributionManagement? &
    pom.properties? &
    pom.dependencyManagement? &
    pom.dependencies? &
    pom.repositories? &
    pom.pluginRepositories? &
    pom.build? &
    pom.reporting? &
    pom.profiles?
}

## Declares to which version of project descriptor this POM conforms.
div {
  pom.modelVersion = element modelVersion {
    pom.modelVersion.attributes, pom.modelVersion.content
  }
  pom.modelVersion.attributes = empty
  pom.modelVersion.content = text
}

## The “parent” element contains information required to locate the
## parent project from which this project will inherit
## from. Note: The children of this element are not interpolated and
## must be given as literal values.
div {
  pom.parent = element parent { pom.parent.attributes, pom.parent.content }

  pom.parent.attributes = empty

  div {
    pom.parent.content = empty

    ## The group id of the parent project to inherit from.
    div {
      pom.parent.content &= pom.parent.groupId?
      pom.parent.groupId = pom.groupId
    }

    ## The artifact id of the parent project to inherit from.
    div {
      pom.parent.content &= pom.parent.artifactId?
      pom.parent.artifactId = pom.artifactId
    }

    ## The version of the parent project to inherit.
    div {
      pom.parent.content &= pom.parent.version?
      pom.parent.version = pom.version
    }

    ## The relative path of the parent “pom.xml” file within the check
    ## out.  Maven looks for the parent POM first in this location on
    ## the filesystem, then the local repository, and lastly in the
    ## remote repo.  “RelativePath” allows you to select a different
    ## location, for example, when your structure is flat, or deeper
    ## without an intermediate parent POM.  However, the group ID,
    ## artifact ID, and version are still required, and must match the
    ## file in the location given or it will revert to the repository
    ## for the POM.  This feature is only for enhancing the
    ## development in a local checkout of that project.  Set the value
    ## to an empty string in case you want to disable the feature and
    ## always resolve the parent POM from the repositories.
    div {
      pom.parent.content &= pom.relativePath?
      pom.relativePath = element relativePath {
        pom.relativePath.attributes, pom.relativePath.content
      }
      pom.relativePath.attributes = empty
      [a:defaultValue = '../pom.xml']
      pom.relativePath.content = text
    }
  }
}

## A universally unique identifier for a project.  It is normal to use
## a fully-qualified package name to distinguish it from other
## projects with a similar name, for example, “org.apache.maven”.
div {
  pom.groupId = element groupId { pom.groupId.attributes, pom.groupId.content }
  pom.groupId.attributes = empty
  pom.groupId.content = text
}

## The identifier for this artifact that is unique within the group
## given by the group ID.  An artifact is something that is either
## produced or used by a project.  Examples of artifacts produced by
## Maven for a project include: JARs, source and binary distributions,
## and WARs.
div {
  pom.artifactId =
    element artifactId { pom.artifactId.attributes, pom.artifactId.content }
  pom.artifactId.attributes = empty
  pom.artifactId.content = text
}

## The current version of the artifact produced by this project.
div {
  pom.version = element version { pom.version.attributes, pom.version.content }
  pom.version.attributes = empty
  pom.version.content = text
}

## The type of artifact this project produces, for example “jar”,
## “war”, “ear”, or “pom”.  Plugins can create their own packaging,
## and therefore their own packaging types, so this list does not
## contain all possible types.
div {
  pom.packaging =
    element packaging { pom.packaging.attributes, pom.packaging.content }
  pom.packaging.attributes = empty
  [a:defaultValue = 'jar']
  pom.packaging.content = text
}

## The full name of the project.
div {
  pom.name = element name { pom.name.attributes, pom.name.content }
  pom.name.attributes = empty
  pom.name.content = text
}

## A detailed description of the project, used by Maven whenever it
## needs to describe the project, such as on the web site. While this
## element can be specified as CDATA to enable the use of HTML tags
## within the description, it is discouraged to allow plain text
## representation. If you need to modify the index page of the
## generated web site, you are able to specify your own instead of
## adjusting this text.
div {
  pom.description =
    element description { pom.description.attributes, pom.description.content }
  pom.description.attributes = empty
  pom.description.content = text
}

## The URL to the project’s homepage.  Default value is: parent value
## [+ path adjustment] + (artifactId or project.directory property),
## or just parent value if project’s
## “child.project.url.inherit.append.path” attribute is “false”.
div {
  pom.url = element url { pom.url.attributes, pom.url.content }
  pom.url.attributes = empty
  pom.url.content = text
}

## The year of the project’s inception, specified with 4 digits.  This
## value is used when generating copyright notices as well as being
## informational.
div {
  pom.inceptionYear = element inceptionYear {
    pom.inceptionYear.attributes, pom.inceptionYear.content
  }
  pom.inceptionYear.attributes = empty
  pom.inceptionYear.content = text
}

## This element describes various attributes of the organization to
## which the project belongs.  These attributes are utilized when
## documentation is created (for copyright notices and links).
div {
  pom.organization = element organization {
    pom.organization.attributes, pom.organization.content
  }

  pom.organization.attributes = empty

  div {
    pom.organization.content = empty

    ## The full name of the organization.
    div {
      pom.organization.content &= pom.organization.content.name?
      pom.organization.content.name = pom.name
    }

    ## The URL to the organization’s home page.
    div {
      pom.organization.content &= pom.organization.content.url?
      pom.organization.content.url = pom.url
    }
  }
}

## This element describes all of the licenses for this project.  Each
## license is described by a “license” element, which is then
## described by additional elements.  Projects should only list the
## license(s) that applies to the project and not the licenses that
## apply to dependencies.  If multiple licenses are listed, it is
## assumed that the user can select any of them, not that they must
## accept all.
div {
  pom.licenses =
    element licenses { pom.licenses.attributes, pom.licenses.content }
  pom.licenses.attributes = empty
  pom.licenses.content = pom.license*
}

## Describes the licenses for this project. This is used to generate
## the license page of the project’s web site, as well as being taken
## into consideration in other reporting and validation.  The licenses
## listed for the project are that of the project itself, and not of
## dependencies.
div {
  pom.license = element license { pom.license.attributes, pom.license.content }

  pom.license.attributes = empty

  div {
    pom.license.content = empty

    ## The full legal name of the license.
    div {
      pom.license.content &= pom.license.content.name?
      pom.license.content.name = pom.name
    }

    ## The official url for the license text.
    div {
      pom.license.content &= pom.license.content.url?
      pom.license.content.url = pom.url
    }

    ## The primary method by which this project may be distributed.
    div {
      pom.license.content &= pom.distribution?
      pom.distribution = element distribution {
        pom.distribution.attributes, pom.distribution.content
      }
      pom.distribution.attributes = empty
      pom.distribution.content =
        ## May be downloaded from the maven repository
        'repo' |
        ## User must manually download and install the dependency
        'manual'
    }

    ## Addendum information pertaining to this license.
    div {
      pom.license.content &= pom.comments?
      pom.comments =
        element comments { pom.comments.attributes, pom.comments.content }
      pom.comments.attributes = empty
      pom.comments.content = text
    }
  }
}

## Describes the committers of a project.
div {
  pom.developers =
    element developers { pom.developers.attributes, pom.developers.content }

  pom.developers.attributes = empty

  div {
    pom.developers.content = pom.developer*

    ## Information about one of the committers on this project.
    div {
      pom.developer =
        element developer { pom.developer.attributes, pom.developer.content }

      pom.developer.attributes = empty

      div {
        pom.developer.content = empty

        ## The unique ID of the developer in the SCM.
        div {
          pom.developer.content &= pom.developer.content.id?
          pom.developer.content.id = pom.id
        }

        ## The full name of the developer.
        div {
          pom.developer.content &= pom.developer.content.name?
          pom.developer.content.name = pom.person-content.name
        }

        ## The email address of the developer.
        div {
          pom.developer.content &= pom.developer.content.email?
          pom.developer.content.email = pom.email
        }

        ## The URL for the homepage of the developer.
        div {
          pom.developer.content &= pom.developer.content.url?
          pom.developer.content.url = pom.url
        }

        ## The organization to which the developer belongs.
        div {
          pom.developer.content &= pom.developer.content.organization?
          pom.developer.content.organization = pom.person-content.organization
        }

        ## The URL of the organization.
        div {
          pom.developer.content &= pom.developer.content.organizationUrl?
          pom.developer.content.organizationUrl = pom.organizationUrl
        }

        ## The roles the developer plays in the project.  Each role is
        ## described by a “role” element, the body of which is a role
        ## name. This can also be used to describe the contribution.
        div {
          pom.developer.content &= pom.developer.content.roles?
          pom.developer.content.roles = pom.roles
        }

        ## The timezone the developer is in.  Typically, this is a
        ## number in the range -12 to +14, see
        ## http://en.wikipedia.org/wiki/UTC%E2%88%9212:00 and
        ## http://en.wikipedia.org/wiki/UTC%2B14:00, or a valid time
        ## zone id like “America/Montreal” (UTC-05:00) or
        ## “Europe/Paris” (UTC+01:00).
        div {
          pom.developer.content &= pom.developer.content.timezone?
          pom.developer.content.timezone = pom.timezone
        }

        ## Properties about the developer, such as an instant
        ## messenger handle.
        div {
          pom.developer.content &= pom.developer.content.properties?
          pom.developer.content.properties = pom.properties
        }
      }
    }
  }
}

## Describes the contributors to a project that are not yet committers.
div {
  pom.contributors = element contributors {
    pom.contributors.attributes, pom.contributors.content
  }

  pom.contributors.attributes = empty

  div {
    pom.contributors.content = pom.contributor*

    ## Description of a person who has contributed to the project, but
    ## who does not have commit privileges.  Usually, these
    ## contributions come in the form of patches submitted.
    div {
      pom.contributor = element contributor {
        pom.contributor.attributes, pom.contributor.content
      }

      pom.contributor.attributes = empty

      div {
        pom.contributor.content = empty

        ## The full name of the contributor.
        div {
          pom.contributor.content &= pom.contributor.content.name?
          pom.contributor.content.name = pom.person-content.name
        }

        ## The email address of the contributor.
        div {
          pom.contributor.content &= pom.contributor.email?
          pom.contributor.email = pom.email
        }

        ## The URL for the homepage of the contributor.
        div {
          pom.contributor.content &= pom.contributor.content.url?
          pom.contributor.content.url = pom.url
        }

        ## The organization to which the contributor belongs.
        div {
          pom.contributor.content &= pom.contributor.content.organization?
          pom.contributor.content.organization = pom.person-content.organization
        }

        ## The URL of the organization.
        div {
          pom.contributor.content &= pom.contributor.content.organizationUrl?
          pom.contributor.content.organizationUrl = pom.organizationUrl
        }

        ## The roles the contributor plays in the project.  Each role
        ## is described by a “role” element, the body of which is a
        ## role name. This can also be used to describe the
        ## contribution.
        div {
          pom.contributor.content &= pom.contributor.content.roles?
          pom.contributor.content.roles = pom.roles
        }

        ## The timezone the contributor is in.  Typically, this is a
        ## number in the range -12 to +14, see
        ## http://en.wikipedia.org/wiki/UTC%E2%88%9212:00 and
        ## http://en.wikipedia.org/wiki/UTC%2B14:00, or a valid time
        ## zone id like “America/Montreal” (UTC-05:00) or
        ## “Europe/Paris” (UTC+01:00).
        div {
          pom.contributor.content &= pom.contributor.content.timezone?
          pom.contributor.content.timezone = pom.timezone
        }

        ## Properties about the contributor, such as an instant
        ## messenger handle.
        div {
          pom.contributor.content &= pom.contributor.content.properties?
          pom.contributor.content.properties = pom.properties
        }
      }
    }
  }
}

## Contains information about a project’s mailing lists.
div {
  pom.mailingLists = element mailingLists {
    pom.mailingLists.attributes, pom.mailingLists.content
  }

  pom.mailingLists.attributes = empty

  div {
    pom.mailingLists.content = pom.mailingList*

    ## This element describes all of the mailing lists associated with
    ## a project.  The auto-generated site references this
    ## information.
    div {
      pom.mailingList = element mailingList {
        pom.mailingList.attributes, pom.mailingList.content
      }

      pom.mailingList.attributes = empty

      div {
        pom.mailingList.content = empty

        ## The name of the mailing list.
        div {
          pom.mailingList.content &= pom.mailingList.content.name?
          pom.mailingList.content.name = pom.name
        }

        ## The email address or link that can be used to subscribe to
        ## the mailing list.  If this is an email address, a “mailto:”
        ## link will automatically be created when the documentation
        ## is created.
        div {
          pom.mailingList.content &= pom.subscribe?
          pom.subscribe = element subscribe {
            pom.subscribe.attributes, pom.subscribe.content
          }
          pom.subscribe.attributes = empty
          pom.subscribe.content = text
        }

        ## The email address or link that can be used to unsubscribe
        ## to the mailing list.  If this is an email address, a
        ## “mailto:” link will automatically be created when the
        ## documentation is created.
        div {
          pom.mailingList.content &= pom.unsubscribe?
          pom.unsubscribe = element unsubscribe {
            pom.unsubscribe.attributes, pom.unsubscribe.content
          }
          pom.unsubscribe.attributes = empty
          pom.unsubscribe.content = text
        }

        ## The email address or link that can be used to post to the
        ## mailing list.  If this is an email address, a “mailto:”
        ## link will automatically be created when the documentation
        ## is created.
        div {
          pom.mailingList.content &= pom.post?
          pom.post = element post { pom.post.attributes, pom.post.content }
          pom.post.attributes = empty
          pom.post.content = text
        }

        ## The link to a URL where you can browse the mailing list
        ## archive.
        div {
          pom.mailingList.content &= pom.archive?
          pom.archive =
            element archive { pom.archive.attributes, pom.archive.content }
          pom.archive.attributes = empty
          pom.archive.content = text
        }

        ## The link to alternate URLs where you can browse the list
        ## archive.
        div {
          pom.mailingList.content &= pom.otherArchives?
          pom.otherArchives = element otherArchives {
            pom.otherArchives.attributes, pom.otherArchives.content
          }

          pom.otherArchives.attributes = empty

          div {
            pom.otherArchives.content = pom.otherArchive*

            div {
              pom.otherArchive = element otherArchive {
                pom.otherArchive.attributes, pom.otherArchive.content
              }
              pom.otherArchive.attributes = empty
              pom.otherArchive.content = text
            }
          }
        }
      }
    }
  }
}

## Describes the prerequisites in the build environment for this
## project.
div {
  pom.prerequisites = element prerequisites {
    pom.prerequisites.attributes, pom.prerequisites.content
  }

  pom.prerequisites.attributes = empty

  div {
    pom.prerequisites.content = empty

    ## For a plugin project (packaging is “maven-plugin”), the minimum
    ## version of Maven required to use the resulting plugin.
    ##
    ## In Maven 2, this was also specifying the minimum version of
    ##Maven required to build a project, but this usage is
    ##/deprecated/; in Maven 3 and not checked any more: use the Maven
    ##Enforcer Plugin’s “requireMavenVersion” rule instead, see
    ##https://maven.apache.org/enforcer/enforcer-rules/requireMavenVersion.html
    div {
      pom.prerequisites.content &= pom.maven?
      pom.maven = element maven { pom.maven.attributes, pom.maven.content }
      pom.maven.attributes = empty
      [a:defaultValue = '2.0']
      pom.maven.content = text
    }
  }
}

## The modules (sometimes called subprojects) to build as a part of
## this project.  Each module listed is a relative path to the
## directory containing the module.  To be consistent with the way
## default urls are calculated from parent, it is recommended to have
## module names match artifact ids.
div {
  pom.modules = element modules { pom.modules.attributes, pom.modules.content }

  pom.modules.attributes = empty

  div {
    pom.modules.content = pom.module*

    div {
      pom.module = element module { pom.module.attributes, pom.module.content }
      pom.module.attributes = empty
      pom.module.content = text
    }
  }
}

## The “scm” element contains informations required to the SCM (Source
## Control Management) of the project.
div {
  pom.scm = element scm { pom.scm.attributes, pom.scm.content }

  div {
    pom.scm.attributes = empty

    ## When childs inherit from scm connection, append path or not?
    ## Note: While the type of this field is “String” for technical
    ## reasons, the semantic type is actually “Boolean”.
    ##
    ## Since: Maven 3.6.1
    div {
      pom.scm.attributes &=
        pom.scm.attributes.child.scm.connection.inherit.append.path?
      [a:defaultValue = 'true']
      pom.scm.attributes.child.scm.connection.inherit.append.path =
        attribute child.scm.connection.inherit.append.path { xsd:boolean }
    }

    ## When childs inherit from scm devloper connection, append path
    ## or not?  Note: While the type of this field is “String” for
    ## technical reasons, the semantic type is actually “Boolean”.
    ##
    ## Since: Maven 3.6.1
    div {
      pom.scm.attributes &=
        pom.scm.attributes.child.scm.developerConnection.inherit.append.path?
      [a:defaultValue = 'true']
      pom.scm.attributes.child.scm.developerConnection.inherit.append.path =
        attribute child.scm.developerConnection.inherit.append.path {
          xsd:boolean
        }
    }

    ## When childs inherit from scm url, append path or not?  Note:
    ## While the type of this field is “String” for technical reasons,
    ## the semantic type is actually “Boolean”.
    ##
    ## Since: Maven 3.6.1
    div {
      pom.scm.attributes &=
        pom.scm.attributes.child.scm.url.inherit.append.path?
      [a:defaultValue = 'true']
      pom.scm.attributes.child.scm.url.inherit.append.path =
        attribute child.scm.url.inherit.append.path { xsd:boolean }
    }
  }

  div {
    pom.scm.content = empty?

    ## The source control management system URL that describes the
    ## repository and how to connect to the repository.  For more
    ## information, see
    ## https://maven.apache.org/scm/scm-url-format.html and
    ## https://maven.apache.org/scm/scms-overview.html.  This
    ## connection is read-only.  Default value is: parent value [+
    ## path adjustment] + (artifactId or project.directory property),
    ## or just parent value if scm’s
    ## “child.scm.url.inherit.append.path attribute” is “false”.
    div {
      pom.scm.content &= pom.scm.content.url?
      pom.scm.content.url = pom.url
    }

    ## Just like “connection”, but for developers, that is, this scm
    ## connection will not be read only.  Default value is: parent
    ## value [+ path adjustment] + (artifactId or project.directory
    ## property), or just parent value if scm’s
    ## “child.scm.connection.inherit.append.path” attribute is
    ## “false”.
    div {
      pom.scm.content &= pom.connection?
      pom.connection =
        element connection { pom.connection.attributes, pom.connection.content }
      pom.connection.attributes = empty
      pom.connection.content = text
    }

    ## Just like “connection”, but for developers, that is, this scm
    ## connection will not be read only.  Default value is: parent
    ## value [+ path adjustment] + (artifactId or project.directory
    ## property), or just parent value if scm’s
    ## “child.scm.developerConnection.inherit.append.path” attribute
    ## is “false”.
    div {
      pom.scm.content &= pom.developerConnection?
      pom.developerConnection = element developerConnection {
        pom.developerConnection.attributes, pom.developerConnection.content
      }

      pom.developerConnection.attributes = empty

      pom.developerConnection.content = text
    }

    ## The tag of current code.
    div {
      pom.scm.content &= pom.tag?
      pom.tag = element tag { pom.tag.attributes, pom.tag.content }
      pom.tag.attributes = empty
      [a:defaultValue = 'HEAD']
      pom.tag.content = text
    }
  }
}

## The project’s issue management system information.
div {
  pom.issueManagement = element issueManagement {
    pom.issueManagement.attributes, pom.issueManagement.content
  }

  pom.issueManagement.attributes = empty

  div {
    pom.issueManagement.content = empty

    ## The name of the issue management system, for example, Bugzilla.
    div {
      pom.issueManagement.content &= pom.issueManagement.content.system?
      pom.issueManagement.content.system = pom.system
    }

    ## URL for the issue management system used by the project.
    div {
      pom.issueManagement.content &= pom.issueManagement.content.url?
      pom.issueManagement.content.url = pom.url
    }
  }
}

## The “ciManagement” element contains informations required to the
## continuous integration system of the project.
div {
  pom.ciManagement = element ciManagement {
    pom.ciManagement.attributes, pom.ciManagement.content
  }

  pom.ciManagement.attributes = empty

  div {
    pom.ciManagement.content = empty

    ## The name of the continuous integration system, for example,
    ## “continuum”.
    div {
      pom.ciManagement.content &= pom.ciManagement.system?
      pom.ciManagement.system = pom.system?
    }

    ## URL for the continuous integration system used by the project
    ## if it has a web interface.
    div {
      pom.ciManagement.content &= pom.ciManagement.content.url?
      pom.ciManagement.content.url = pom.url
    }

    ## Configuration for notifying developers/users when a build is
    ## unsuccessful, including user information and notification mode.
    div {
      pom.ciManagement.content &= pom.notifiers?
      pom.notifiers =
        element notifiers { pom.notifiers.attributes, pom.notifiers.content }

      pom.notifiers.attributes = empty

      pom.notifiers.content = pom.notifier*

      ## Configures one method for notifying users/developers when a
      ## build breaks.
      div {
        pom.notifier =
          element notifier { pom.notifier.attributes, pom.notifier.content }

        pom.notifier.attributes = empty

        div {
          pom.notifier.content = empty

          ## The mechanism used to deliver notifications.
          div {
            pom.notifier.content &= pom.notifier.content.type?
            pom.notifier.content.type = element type {
              pom.notifier.content.type.attributes,
              pom.notifier.content.type.content
            }
            pom.notifier.content.type.attributes = empty
            [a:defaultValue = 'mail']
            pom.notifier.content.type.content = text
          }

          ## Whether to send notifications on error.
          div {
            pom.notifier.content &= pom.sendOnError?
            pom.sendOnError = element sendOnError {
              pom.sendOnError.attributes, pom.sendOnError.content
            }
            pom.sendOnError.attributes = empty
            [a:defaultValue = 'true']
            pom.sendOnError.content = xsd:boolean
          }

          ## Whether to send notifications on failure.
          div {
            pom.notifier.content &= pom.sendOnFailure?
            pom.sendOnFailure = element sendOnFailure {
              pom.sendOnFailure.attributes, pom.sendOnFailure.content
            }
            pom.sendOnFailure.attributes = empty
            [a:defaultValue = 'true']
            pom.sendOnFailure.content = xsd:boolean
          }

          ## Whether to send notifications on success.
          div {
            pom.notifier.content &= pom.sendOnSuccess?
            pom.sendOnSuccess = element sendOnSuccess {
              pom.sendOnSuccess.attributes, pom.sendOnSuccess.content
            }
            pom.sendOnSuccess.attributes = empty
            [a:defaultValue = 'true']
            pom.sendOnSuccess.content = xsd:boolean
          }

          ## Whether to send notifications on warning.
          div {
            pom.notifier.content &= pom.sendOnWarning?
            pom.sendOnWarning = element sendOnWarning {
              pom.sendOnWarning.attributes, pom.sendOnWarning.content
            }
            pom.sendOnWarning.attributes = empty
            [a:defaultValue = 'true']
            pom.sendOnWarning.content = xsd:boolean
          }

          ## Extended configuration specific to this notifier goes
          ## here.
          div {
            pom.notifier.content &= pom.notifier.content.configuration?
            pom.notifier.content.configuration = pom.configuration
          }
        }
      }
    }
  }
}

## Distribution information for a project that enables deployment of
## the site and artifacts to remote web servers and repositories
## respectively.
div {
  pom.distributionManagement = element distributionManagement {
    pom.distributionManagement.attributes, pom.distributionManagement.content
  }

  pom.distributionManagement.attributes = empty

  div {
    pom.distributionManagement.content = empty

    ## Information needed to deploy the artifacts generated by the
    ## project to a remote repository.
    div {
      pom.distributionManagement.content &=
        pom.distributionManagement.content.repository?
      pom.distributionManagement.content.repository = element repository {
        pom.distributionManagement.content.repository.attributes,
        pom.distributionManagement.content.repository.content
      }
      pom.distributionManagement.content.repository.attributes = empty
      pom.distributionManagement.content.repository.content =
        pom.deployment-repository.content
    }

    ## Where to deploy snapshots of artifacts to.  If not given, it
    ## defaults to the “repository” element.
    div {
      pom.distributionManagement.content &=
        pom.distributionManagement.content.snapshotRepository?
      pom.distributionManagement.content.snapshotRepository =
        element snapshotRepository {
          pom.distributionManagement.content.snapshotRepository.attributes,
          pom.distributionManagement.content.snapshotRepository.content
        }
      pom.distributionManagement.content.snapshotRepository.attributes = empty
      pom.distributionManagement.content.snapshotRepository.content =
        pom.deployment-repository.content
    }

    ## Information needed for deploying the web site of the project.
    div {
      pom.distributionManagement.content &= pom.site?
      pom.site = element site { pom.site.attributes, pom.site.content }


      div {
        pom.site.attributes = empty

        ## When childs inherit from distribution management site url,
        ## append path or not?  Note: While the type of this field is
        ## “String” for technical reasons, the semantic type is
        ## actually “Boolean”.
        ##
        ## Since: Maven 3.6.1
        div {
          pom.site.attributes &=
            pom.site.attributes.child.site.url.inherit.append.path?
          [a:defaultValue = 'true']
          pom.site.attributes.child.site.url.inherit.append.path =
            attribute child.site.url.inherit.append.path { text }
        }
      }

      div {
        pom.site.content = empty

        ## A unique identifier for a deployment location.  This is
        ## used to match the site to configuration in the
        ## “settings.xml” file, for example.
        div {
          pom.site.content &= pom.site.content.id?
          pom.site.content.id = pom.id
        }

        ## Human readable name of the deployment location.
        div {
          pom.site.content &= pom.site.content.name?
          pom.site.content.name = pom.name
        }

        ## The url of the location where website is deployed, in the
        ## form “protocol://hostname/path”.
        ##
        ## Default value is: parent value [+ path adjustment] +
        ## (artifactId or project.directory property), or just parent
        ## value if site’s “child.site.url.inherit.append.path”
        ## attribute is “false”.
        div {
          pom.site.content &= pom.site.content.url?
          pom.site.content.url = pom.url
        }
      }
    }

    ## The URL of the project’s download page. If not given users will
    ## be referred to the homepage given by “url”.  This is given to
    ## assist in locating artifacts that are not in the repository due
    ## to licensing restrictions.
    div {
      pom.distributionManagement.content &= pom.downloadUrl?
      pom.downloadUrl = element downloadUrl {
        pom.downloadUrl.attributes, pom.downloadUrl.content
      }
      pom.downloadUrl.attributes = empty
      pom.downloadUrl.content = text
    }

    ## Relocation information of the artifact if it has been moved to
    ## a new group ID and/or artifact ID.  If any of the values are
    ## omitted, it is assumed to be the same as it was before.
    div {
      pom.distributionManagement.content &= pom.relocation?
      pom.relocation =
        element relocation { pom.relocation.attributes, pom.relocation.content }

      pom.relocation.attributes = empty

      div {
        pom.relocation.content = empty

        ## The group ID the artifact has moved to.
        div {
          pom.relocationt.content &= pom.relocatio.content.groupId?
          pom.relocation.content.groupId = pom.groupId
        }

        ## The new artifact ID of the artifact.
        div {
          pom.relocationt.content &= pom.relocatio.content.artifactId?
          pom.relocation.content.artifactId = pom.artifactId
        }

        ## The new version of the artifact.
        div {
          pom.relocationt.content &= pom.relocatio.content.version?
          pom.relocation.content.version = pom.version
        }

        ## An additional message to show the user about the move, such
        ## as the reason.
        div {
          pom.relocation.content &= pom.message?
          pom.message =
            element message { pom.message.attributes, pom.message.content }
          pom.message.attributes = empty
          pom.message.content = text
        }
      }
    }

    ## Gives the status of this artifact in the remote repository.
    ## This must not be set in your local project, as it is updated by
    ## tools placing it in the reposiory.
    div {
      pom.distributionManagement.content &= pom.status?
      pom.status = element status { pom.status.attributes, pom.status.content }
      pom.status.attributes = empty
      [a:defaultValue = 'none']
      pom.status.content =
        'none' |
        ## Repository manager converted this from a Maven 1 POM
        'converted' |
        ## Directly synced from a partner Maven 2 repository
        'partner' |
        ## Was deployed from a Maven 2 instance
        'deployed' |
        ## Has been hand verified as correct and final
        'verified'
    }

    ## Repository contains the information needed for deploying to the
    ## remote repository.
    div {
      pom.deployment-repository.content = empty

      ## Whether to assign snapshots a unique version comprised of the
      ## timestamp and build number, or to use the same version each
      ## time.
      div {
        pom.deployment-repository.content &= pom.uniqueVersion?
        pom.uniqueVersion = element uniqueVersion {
          pom.uniqueVersion.attributes, pom.uniqueVersion.content
        }
        pom.uniqueVersion.attributes = empty
        [a:defaultValue = 'true']
        pom.uniqueVersion.content = xsd:boolean
      }

      ## How to handle downloading of releases from this repository.
      div {
        pom.deployment-repository.content &=
          pom.deployment-repository.content.releases?
        pom.deployment-repository.content.releases = pom.releases
      }

      ## How to handle downloading of snapshots from this repository.
      div {
        pom.deployment-repository.content &=
          pom.deployment-repository.content.snapshots?
        pom.deployment-repository.content.snapshots = pom.snapshots
      }

      ## A unique identifier for a repository.  This is used to match
      ## the repository to configuration in the “settings.xml” file,
      ## for example.  Furthermore, the identifier is used during POM
      ## inheritance and profile injection to detect repositories that
      ## should be merged.
      div {
        pom.deployment-repository.content &=
          pom.deployment-repository.content.id?
        pom.deployment-repository.content.id = pom.id
      }

      ## Human readable name of the repository.
      div {
        pom.deployment-repository.content &=
          pom.deployment-repository.content.name?
        pom.deployment-repository.content.name = pom.name
      }

      ## The url of the repository, in the form “protocol://hostname/path”.
      div {
        pom.deployment-repository.content &=
          pom.deployment-repository.content.url?
        pom.deployment-repository.content.url = pom.url
      }

      ## The type of layout this repository uses for locating and
      ## storing artifacts.
      div {
        pom.deployment-repository.content &=
          pom.deployment-repository.content.layout?
        pom.deployment-repository.content.layout = pom.layout
      }
    }
  }
}

## Properties that can be used throughout the POM as a substitution,
## and are used as filters in resources if enabled.  The format is
## “<name>value</name>”.
div {
  pom.properties =
    element properties { pom.properties.attributes, pom.properties.content }
  pom.properties.attributes = empty
  pom.properties.content = pom.any.element*
}

## Default dependency information for projects that inherit from this
## one.  The dependencies in this section are not immediately
## resolved.  Instead, when a POM derived from this one declares a
## dependency described by a matching groupId and artifactId, the
## version and other values from this section are used for that
## dependency if they were not already specified.
div {
  pom.dependencyManagement = element dependencyManagement {
    pom.dependencyManagement.attributes, pom.dependencyManagement.content
  }
  pom.dependencyManagement.attributes = empty
  pom.dependencyManagement.content = pom.dependencies?
}

## This element describes all of the dependencies associated with a
## project.  These dependencies are used to construct a classpath for
## your project during the build process.  They are automatically
## downloaded from the repositories defined in this project.  See
## https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html
## for more information.
div {
  pom.dependencies = element dependencies {
    pom.dependencies.attributes, pom.dependencies.content
  }

  pom.dependencies.attributes = empty

  ## The “dependency” element contains information about a dependency
  ## of the project.
  div {
    pom.dependencies.content = pom.dependency*

    div {
      pom.dependency =
        element dependency { pom.dependency.attributes, pom.dependency.content }

      pom.dependency.attributes = empty

      div {
        pom.dependency.content = empty

        ## The project group that produced the dependency, for
        ## example, “org.apache.maven”.
        div {
          pom.dependency.content &= pom.dependency.content.groupId?
          pom.dependency.content.groupId = pom.groupId
        }

        ## The unique id for an artifact produced by the project
        ## group, for example, “maven-artifact”.
        div {
          pom.dependency.content &= pom.dependency.content.artifactId?
          pom.dependency.content.artifactId = pom.artifactId
        }

        ## The version of the dependency, for example, “3.2.1”.  In
        ## Maven 2, this can also be specified as a range of versions.
        div {
          pom.dependency.content &= pom.dependency.content.version?
          pom.dependency.content.version = pom.version
        }

        ## The type of dependency.  While it usually represents the
        ## extension on the filename of the dependency, that is not
        ## always the case.  A type can be mapped to a different
        ## extension and a classifier.  The type often corresponds to
        ## the packaging used, though this is also not always the
        ## case.  Some examples are “jar”, “war”, “ejb-client” and
        ## “test-jar”: see
        ## https://maven.apache.org/ref/3.6.3/maven-core/artifact-handlers.html
        ## for a list.  New types can be defined by plugins that set
        ## “extensions” to “true”, so this is not a complete list.
        div {
          pom.dependency.content &= pom.dependency.content.type?
          pom.dependency.content.type = element type {
            pom.dependency.content.type.attributes,
            pom.dependency.content.type.content
          }
          pom.dependency.content.type.attributes = empty
          [a:defaultValue = 'jar']
          pom.dependency.content.type.content = text
        }

        ## The classifier of the dependency.  It is appended to the
        ## filename after the version.  This allows:
        ##
        ## •   Referring to attached artifact, for examplex, “sources”
        ##     and “javadoc”: see
        ##     https://maven.apache.org/ref/3.6.3/maven-core/artifact-handlers.html
        ##     for a list
        ## •   Distinguishing two artifacts that belong to the same POM
        ##     but were built differently, for example, “jdk14”nd “jdk15”.
        div {
          pom.dependency.content &= pom.classifier?
          pom.classifier = element classifier {
            pom.classifier.attributes, pom.classifier.content
          }
          pom.classifier.attributes = empty
          pom.classifier.content = text
        }

        ## The scope of the dependency – “compile”, “runtime”, “test”,
        ## “system”, and “provided”.  Used to calculate the various
        ## classpaths used for compilation, testing, and so on.  It
        ## also assists in determining which artifacts to include in a
        ## distribution of this project.  For more information, see
        ## https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html.
        div {
          pom.dependency.content &= pom.scope?
          pom.scope = element scope { pom.scope.attributes, pom.scope.content }
          pom.scope.attributes = empty
          [a:defaultValue = 'compile']
          pom.scope.content = text
        }

        ## For “scope” set to “system” only.  Note that use of this
        ## property is /discouraged/ and may be replaced in later
        ## versions.  This specifies the path on the filesystem for
        ## this dependency.  Requires an absolute path for the value,
        ## not relative . Use a property that gives the machine
        ## specific absolute path, for example, “${java.home}”.
        div {
          pom.dependency.content &= pom.systemPath?
          pom.systemPath = element systemPath {
            pom.systemPath.attributes, pom.systemPath.content
          }
          pom.systemPath.attributes = empty
          pom.systemPath.content = text
        }

        ## Lists a set of artifacts that should be excluded from this
        ## dependency’s artifact list when it comes to calculating
        ## transitive dependencies.
        div {
          pom.dependency.content &= pom.exclusions?
          pom.exclusions = element exclusions {
            pom.exclusions.attributes, pom.exclusions.content
          }

          pom.exclusions.attributes = empty

          ## The “exclusion” element contains informations required to
          ## exclude an artifact to the project.
          div {
            pom.exclusions.content = pom.exclusion*

            div {
              pom.exclusion = element exclusion {
                pom.exclusion.attributes, pom.exclusion.content
              }

              pom.exclusion.attributes = empty

              ## The group ID of the project to exclude.
              div {
                pom.exclusion.content &= pom.exclusion.content.groupId?
                pom.exclusion.content.groupId = pom.groupId
              }

              ## The artifact ID of the project to exclude.
              div {
                pom.exclusion.content &= pom.exclusion.content.artifactId?
                pom.exclusion.content.artifactId = pom.artifactId
              }
            }
          }
        }

        ## Indicates the dependency is optional for use of this
        ## library.  While the version of the dependency will be taken
        ## into account for dependency calculation if the library is
        ## used elsewhere, it will not be passed on transitively.
        ## Note: While the type of this field is “String” for
        ## technical reasons, the semantic type is actually “Boolean”.
        div {
          pom.dependency.content &= pom.optional?
          pom.optional =
            element optional { pom.optional.attributes, pom.optional.content }
          pom.optional.attributes = empty
          [a:defaultValue = 'false']
          pom.optional.content = text
        }
      }
    }
  }
}

## The lists of the remote repositories for discovering dependencies
## and extensions.
div {
  pom.repositories = element repositories {
    pom.repositories.attributes, pom.repositories.content
  }

  pom.repositories.attributes = empty

  div {
    pom.repositories.content = pom.repository*

    div {
      pom.repository =
        element repository { pom.repository.attributes, pom.repository.content }
      pom.repository.attributes = empty
      pom.repository.content = pom.repository-content
    }
  }
}

## The lists of the remote repositories for discovering plugins for
## builds and reports.
div {
  pom.pluginRepositories = element pluginRepositories {
    pom.pluginRepositories.attributes, pom.pluginRepositories.content
  }

  pom.pluginRepositories.attributes = empty

  div {
    pom.pluginRepositories.content = pom.pluginRepository*

    div {
      pom.pluginRepository = element pluginRepository {
        pom.pluginRepository.attributes, pom.pluginRepository.content
      }
      pom.pluginRepository.attributes = empty
      pom.pluginRepository.content = pom.repository-content
    }
  }
}

## The “build” element contains informations required to build the
## project.  Default values are defined in Super POM.
div {
  pom.build = element build { pom.build.attributes, pom.build.content }

  pom.build.attributes = empty

  div {
    pom.build.content = empty

    ## This element specifies a directory containing the source of the
    ## project.  The generated build system will compile the sources
    ## from this directory when the project is built.  The path given
    ## is relative to the project descriptor.
    div {
      pom.build.content &= pom.sourceDirectory?
      pom.sourceDirectory = element sourceDirectory {
        pom.sourceDirectory.attributes, pom.sourceDirectory.content
      }
      pom.sourceDirectory.attributes = empty
      [a:defaultValue = 'src/main/java']
      pom.sourceDirectory.content = text
    }

    ## This element specifies a directory containing the script
    ## sources of the project.  This directory is meant to be
    ## different from the sourceDirectory, in that its contents will
    ## be copied to the output directory in most cases (since scripts
    ## are interpreted rather than compiled).
    div {
      pom.build.content &= pom.scriptSourceDirectory?
      pom.scriptSourceDirectory = element scriptSourceDirectory {
        pom.scriptSourceDirectory.attributes, pom.scriptSourceDirectory.content
      }
      pom.scriptSourceDirectory.attributes = empty
      [a:defaultValue = 'src/main/scripts']
      pom.scriptSourceDirectory.content = text
    }

    ## This element specifies a directory containing the unit test
    ## source of the project.  The generated build system will compile
    ## these directories when the project is being tested.  The path
    ## given is relative to the project descriptor.
    div {
      pom.build.content &= pom.testSourceDirectory?
      pom.testSourceDirectory = element testSourceDirectory {
        pom.testSourceDirectory.attributes, pom.testSourceDirectory.content
      }
      pom.testSourceDirectory.attributes = empty
      [a:defaultValue = 'src/test/java']
      pom.testSourceDirectory.content = text
    }

    ## The directory where compiled application classes are placed.
    div {
      pom.build.content &= pom.build.content.outputDirectory?
      [a:defaultValue = 'target/classes']
      pom.build.content.outputDirectory = pom.outputDirectory
    }

    ## The directory where compiled test classes are placed.
    div {
      pom.build.content &= pom.testOutputDirectory?
      pom.testOutputDirectory = element testOutputDirectory {
        pom.testOutputDirectory.attributes, pom.testOutputDirectory.content
      }
      pom.testOutputDirectory.attributes = empty
      [a:defaultValue = 'target/test-classes']
      pom.testOutputDirectory.content = text
    }

    ## A set of build extensions to use from this project.
    ## TODO Reuse previous definition of extensions (make it common).
    div {
      pom.build.content &= pom.build.content.extensions?
      pom.build.content.extensions = element extensions {
        pom.build.content.extensions.attributes,
        pom.build.content.extensions.content
      }

      pom.build.content.extensions.attributes = empty

      div {
        pom.build.content.extensions.content = pom.extension*

        ## Describes a build extension to utilize.
        div {
          pom.extension = element extension {
            pom.extension.attributes, pom.extension.content
          }

          pom.extension.attributes = empty

          ## The group ID of the extension’s artifact.
          div {
            pom.extension.content &= pom.extension.content.groupId?
            pom.extension.content.groupId = pom.groupId
          }

          ## The artifact ID of the extension.
          div {
            pom.extension.content &= pom.extension.content.artifactId?
            pom.extension.content.artifactId = pom.artifactId
          }

          ## The version of the extension.
          div {
            pom.extension.content &= pom.extension.content.version?
            pom.extension.content.version = pom.version
          }
        }
      }
    }

    ## The default goal (or phase in Maven 2) to execute when none is
    ## specified for the project.  Note that in case of a multi-module
    ## build, only the default goal of the top-level project is
    ## relevant, that is, the default goals of child modules are
    ## ignored.  Since Maven 3, multiple goals/phases can be separated
    ## by whitespace.
    div {
      pom.build.content &= pom.build.content.defaultGoal?
      pom.build.content.defaultGoal = pom.defaultGoal
    }

    ## This element describes all of the classpath resources such as
    ## properties files associated with a project.  These resources
    ## are often included in the final package.  The default value is
    ## “src/main/resources”.
    div {
      pom.build.content &= pom.build.content.resources?
      pom.build.content.resources = pom.resources
    }

    ## This element describes all of the classpath resources such as
    ## properties files associated with a project’s unit tests.  The
    ## default value is “src/test/resources”.
    div {
      pom.build.content &= pom.build.content.testResources?
      pom.build.content.testResources = pom.testResources
    }

    ## The directory where all files generated by the build are
    ## placed.
    div {
      pom.build.content &= pom.build.content.directory?
      pom.build.content.directory = element directory {
        pom.build.content.directory.attributes,
        pom.build.content.directory.content
      }
      pom.build.content.directory.attributes = empty
      [a:defaultValue = 'target']
      pom.build.content.directory.content = text
    }

    ## The filename (excluding the extension, and with no path
    ## information) that the produced artifact will be called.  The
    ## default value is “${artifactId}-${version}”.
    div {
      pom.build.content &= pom.build.content.finalName?
      pom.build.content.finalName = pom.finalName
    }

    ## The list of filter properties files that are used when
    ## filtering is enabled.
    div {
      pom.build.content &= pom.build.content.filters?
      pom.build.content.filters = pom.filters
    }

    ## Default plugin information to be made available for reference
    ## by projects derived from this one.  This plugin configuration
    ## will not be resolved or bound to the lifecycle unless
    ## referenced.  Any local configuration for a given plugin will
    ## override the plugin’s entire definition here.
    div {
      pom.build.content &= pom.build.content.pluginManagement?
      pom.build.content.pluginManagement = pom.pluginManagement
    }

    ## The list of plugins to use.
    div {
      pom.build.content &= pom.build.content.plugins?
      pom.build.content.plugins = pom.plugins
    }
  }
}

## This element includes the specification of report plugins to use to
## generate the reports on the Maven-generated site.  These reports
## will be run when a user executes “mvn site”.  All of the reports
## will be included in the navigation bar for browsing.
div {
  pom.reporting =
    element reporting { pom.reporting.attributes, pom.reporting.content }

  pom.reporting.attributes = empty

  div {
    pom.reporting.content = empty

    ## If true, then the default reports are not included in the site
    ## generation.  This includes the reports in the “Project Info”
    ## menu.  Note: While the type of this field is “String” for
    ## technical reasons, the semantic type is actually “Boolean”.
    div {
      pom.reporting.content &= pom.excludeDefaults?
      pom.excludeDefaults = element excludeDefaults {
        pom.excludeDefaults.attributes, pom.excludeDefaults.content
      }
      pom.excludeDefaults.attributes = empty
      [a:defaultValue = 'false']
      pom.excludeDefaults.content = text
    }

    ## Where to store all of the generated reports.
    div {
      pom.reporting.content &= pom.reporting.content.outputDirectory?
      [a:defaultValue = '${project.build.directory}/site']
      pom.reporting.content.outputDirectory = pom.outputDirectory
    }

    ## The reporting plugins to use and their configuration.
    div {
      pom.reporting.content &= pom.reporting.content.plugins?
      pom.reporting.content.plugins = element plugins {
        pom.reporting.content.plugins.attributes,
        pom.reporting.content.plugins.content
      }

      pom.reporting.content.plugins.attributes = empty

      pom.reporting.content.plugins.content = pom.reporting.content.plugin*

      ## The “plugin” element contains informations required for a
      ## report plugin.
      div {
        pom.reporting.content.plugin = element plugin {
          pom.reporting.content.plugin.attributes,
          pom.reporting.content.plugin.content
        }

        pom.reporting.content.plugin.attributes = empty

        div {
          pom.reporting.content.plugin.content = empty

          ## The group ID of the reporting plugin in the repository.
          div {
            pom.reporting.content.plugin.content &=
              pom.reporting.content.plugin.content.groupId?
            pom.reporting.content.plugin.content.groupId = element groupId {
              pom.reporting.content.plugin.content.groupId.attributes,
              pom.reporting.content.plugin.content.groupId.content
            }
            pom.reporting.content.plugin.content.groupId.attributes = empty
            [a:defaultValue = 'org.apache.maven.plugins']
            pom.reporting.content.plugin.content.groupId.content = text
          }

          ## The artifact ID of the reporting plugin in the
          ## repository.
          div {
            pom.reporting.content.plugin.content &=
              pom.reporting.content.plugin.content.artifactId?
            pom.reporting.content.plugin.content.artifactId = pom.artifactId
          }

          ## The version of the reporting plugin to be used.
          div {
            pom.reporting.content.plugin.content &=
              pom.reporting.content.plugin.content.version?
            pom.reporting.content.plugin.content.version = pom.version
          }

          ## Multiple specifications of a set of reports, each having
          ## (possibly) different configuration.  This is the
          ## reporting parallel to an “execution” in the build.
          div {
            pom.reporting.content.plugin.content &= pom.reportSets?
            pom.reportSets = element reportSets {
              pom.reportSets.attributes, pom.reportSets.content
            }

            pom.reportSets.attributes = empty

            pom.reportSets.content = pom.reportSet*

            ## Represents a set of reports and configuration to be
            ## used to generate them.
            div {
              pom.reportSet = element reportSet {
                pom.reportSet.attributes, pom.reportSet.content
              }

              pom.reportSet.attributes = empty

              div {
                pom.reportSet.content = empty

                ## The unique id for this report set, to be used
                ## during POM inheritance and profile injection for
                ## merging of report sets.
                div {
                  pom.reportSet.content &= pom.reportSet.content.id?
                  pom.reportSet.content.id = pom.id
                }

                ## The list of reports from this plugin which should
                ## be generated from this set.
                div {
                  pom.reportSet.content &= pom.reportSet.content.reports?
                  pom.reportSet.content.reports = element reports {
                    pom.reportSet.content.reports.attributes,
                    pom.reportSet.content.reports.content
                  }
                  pom.reportSet.content.reports.attributes = empty
                  pom.reportSet.content.reports.content = pom.report*

                  div {
                    pom.report = element report {
                      pom.report.attributes, pom.report.content
                    }
                    pom.report.attributes = empty
                    pom.report.content = text
                  }
                }

                ## Whether any configuration should be propagated to
                ## child POMs.  Note: While the type of this field is
                ## “String” for technical reasons, the semantic type
                ## is actually “Boolean”.
                div {
                  pom.reportSet.content &= pom.reportSet.content.inherited?
                  pom.reportSet.content.inherited = pom.inherited
                }

                ## The configuration as a DOM object.
                ##
                ## By default, every element content is trimmed, but
                ## starting with Maven 3.1.0, you can add
                ## “xml:space="preserve"” to elements you want to
                ## preserve whitespace.
                ##
                ## You can control how child POMs inherit
                ## configuration from parent POMs by adding
                ## “combine.children” or “combine.self” attributes to
                ## the children of the configuration element:
                ##
                ## •   “combine.children”: available values are
                ##     “merge” (default) and “append”
                ## •   “combine.self”: available values are “merge”
                ##     (default) and “override”
                ##
                ## See https://maven.apache.org/pom.html#Plugins and
                ## https://codehaus-plexus.github.io/plexus-utils/apidocs/org/codehaus/plexus/util/xml/Xpp3DomUtils.html
                ## for more information.
                div {
                  pom.reportSet.content &= pom.reportSet.content.configuration?
                  pom.reportSet.content.configuration = pom.configuration
                }
              }
            }
          }

          ## Whether any configuration should be propagated to child
          ## POMs.  Note: While the type of this field is “String” for
          ## technical reasons, the semantic type is actually
          ## “Boolean”.
          div {
            pom.reporting.content.plugin.content &=
              pom.reporting.content.plugin.content.inherited?
            pom.reporting.content.plugin.content.inherited = pom.inherited
          }

          ## The configuration as a DOM object.
          ##
          ## By default, every element content is trimmed, but
          ## starting with Maven 3.1.0, you can add
          ## “xml:space="preserve"” to elements you want to preserve
          ## whitespace.
          ##
          ## You can control how child POMs inherit configuration from
          ## parent POMs by adding “combine.children” or
          ## “combine.self” attributes to the children of the
          ## configuration element:
          ##
          ## •   “combine.children”: available values are “merge”
          ##     (default) and “append”
          ## •   “combine.self”: available values are “merge”
          ##     (default) and “override”
          ##
          ## See https://maven.apache.org/pom.html#Plugins and
          ## https://codehaus-plexus.github.io/plexus-utils/apidocs/org/codehaus/plexus/util/xml/Xpp3DomUtils.html
          ## for more information.
          div {
            pom.reporting.content.plugin.content &=
              pom.reporting.content.plugin.content.configuration?
            pom.reporting.content.plugin.content.configuration =
              pom.configuration
          }
        }
      }
    }
  }
}

## A listing of project-local build profiles which will modify the
## build process when activated.
div {
  pom.profiles =
    element profiles { pom.profiles.attributes, pom.profiles.content }

  pom.profiles.attributes = empty

  div {
    pom.profiles.content = pom.profile*

    ## Modifications to the build process which is activated based on
    ## environmental parameters or command line arguments.
    div {
      pom.profile =
        element profile { pom.profile.attributes, pom.profile.content }

      pom.profile.attributes = empty

      div {
        pom.profile.content = empty

        ## The identifier of this build profile. This is used for
        ## command line activation, and identifies profiles to be
        ## merged.
        [a:defaultValue = 'default']
        div {
          pom.profile.content &= pom.profile.content.id?
          pom.profile.content.id = pom.id?
        }

        ## The conditions within the build runtime environment which
        ## will trigger the automatic inclusion of the build profile.
        ## Multiple conditions can be defined, which must be all
        ## satisfied to activate the profile.
        div {
          pom.profile.content &= pom.activation?
          pom.activation = element activation {
            pom.activation.attributes, pom.activation.content
          }

          pom.activation.attributes = empty

          div {
            pom.activation.content = empty

            ## If set to true, this profile will be active unless
            ## another profile in this pom is activated using the
            ## command line “-P” option or by one of that profile’s
            ## activators.
            div {
              pom.activation.content &= pom.activeByDefault?
              pom.activeByDefault = element activeByDefault {
                pom.activeByDefault.attributes, pom.activeByDefault.content
              }
              pom.activeByDefault.attributes = empty
              [a:defaultValue = 'false']
              pom.activeByDefault.content = xsd:boolean
            }

            ## Specifies that this profile will be activated when a
            ## matching JDK is detected.  For example, “1.4” only
            ## activates on JDKs versioned 1.4, while “!1.4” matches
            ## any JDK that is not version 1.4.  Ranges are supported
            ## too: “[1.5,)” activates when the JDK is 1.5 minimum.
            div {
              pom.activation.content &= pom.jdk?
              pom.jdk = element jdk { pom.jdk.attributes, pom.jdk.content }
              pom.jdk.attributes = empty
              pom.jdk.content = text
            }

            ## Specifies that this profile will be activated when
            ## matching operating system attributes are detected.
            div {
              pom.activation.content &= pom.os?
              pom.os = element os { pom.os.attributes, pom.os.content }

              pom.os.attributes = empty

              div {
                pom.os.content = empty

                ## The name of the operating system to be used to
                ## activate the profile. This must be an exact match
                ## of the “${os.name}” Java property, such as “Windows
                ## XP”.
                div {
                  pom.os.content &= pom.os.content.name?
                  pom.os.content.name = pom.name
                }

                ## The general family of the OS to be used to activate
                ## the profile, such as “windows” or “unix”.
                div {
                  pom.os.content &= pom.family?
                  pom.family =
                    element family { pom.family.attributes, pom.family.content }
                  pom.family.attributes = empty
                  pom.family.content = text
                }

                ## The architecture of the operating system to be used
                ## to activate the profile.
                div {
                  pom.os.content &= pom.arch?
                  pom.arch =
                    element arch { pom.arch.attributes, pom.arch.content }
                  pom.arch.attributes = empty
                  pom.arch.content = text
                }

                ## The version of the operating system to be used to
                ## activate the profile.
                div {
                  pom.os.content &= pom.os.content.version?
                  pom.os.content.version = pom.version
                }
              }
            }

            ## Specifies that this profile will be activated when this
            ## system property is specified.  If the value field is
            ## empty, then the existence of the named property will
            ## activate the profile, otherwise it does a
            ## case-sensitive match against the property value as
            ## well.
            div {
              pom.activation.content &= pom.property?
              pom.property = element property {
                pom.property.attributes, pom.property.content
              }

              pom.property.attributes = empty

              div {
                pom.property.content = empty

                ## The name of the property to be used to activate a
                ## profile.
                div {
                  pom.property.content &= pom.property.content.name?
                  pom.property.content.name = pom.name
                }

                ## The value of the property required to activate a
                ## profile.
                div {
                  pom.property.content &= pom.value?
                  pom.value =
                    element value { pom.value.attributes, pom.value.content }
                  pom.value.attributes = empty
                  pom.value.content = text
                }
              }
            }

            ## Specifies that this profile will be activated based on
            ## existence of a file.  The “missing” value is the
            ## location of a file that needs to exist, and if it
            ## doesn’t, the profile will be activated. On the other
            ## hand, “exists” will test for the existence of the file
            ## and if it is there, the profile will be activated.
            ##
            ## Variable interpolation for these file specifications is
            ## limited to “${basedir}”, System properties and request
            ## properties.
            div {
              pom.activation.content &= pom.file?
              pom.file = element file { pom.file.attributes, pom.file.content }

              pom.file.attributes = empty

              div {
                pom.file.content = empty

                ## The name of the file that must be missing to
                ## activate the profile.
                div {
                  pom.file.content &= pom.missing?
                  pom.missing = element missing {
                    pom.missing.attributes, pom.missing.content
                  }
                  pom.missing.attributes = empty
                  pom.missing.content = text
                }

                ## The name of the file that must exist to activate
                ## the profile.
                div {
                  pom.file.content &= pom.exists?
                  pom.exists =
                    element exists { pom.exists.attributes, pom.exists.content }
                  pom.exists.attributes = empty
                  pom.exists.content = text
                }
              }
            }
          }
        }

        ## Information required to build the project.
        div {
          pom.profile.content &= pom.profile.content.build?
          pom.profile.content.build = element build {
            pom.profile.content.build.attributes,
            pom.profile.content.build.content
          }

          pom.profile.content.build.attributes = empty

          div {
            pom.profile.content.build.content = empty

            ## The default goal (or phase in Maven 2) to execute when
            ## none is specified for the project.  Note that in case
            ## of a multi-module build, only the default goal of the
            ## top-level project is relevant, that is, the default
            ## goals of child modules are ignored.  Since Maven 3,
            ## multiple goals/phases can be separated by whitespace.
            div {
              pom.profile.content.build.content &=
                pom.profile.content.build.content.defaultGoal?
              pom.profile.content.build.content.defaultGoal = pom.defaultGoal
            }

            ## This element describes all of the classpath resources
            ## such as properties files associated with a project.
            ## These resources are often included in the final
            ## package. The default value is “src/main/resources”.
            div {
              pom.profile.content.build.content &=
                pom.profile.content.build.content.resources?
              pom.profile.content.build.content.resources = pom.resources
            }

            ## This element describes all of the classpath resources
            ## such as properties files associated with a project’s
            ## unit tests.  The default value is “src/test/resources”.
            div {
              pom.profile.content.build.content &=
                pom.profile.content.build.content.testResources?
              pom.profile.content.build.content.testResources =
                pom.testResources
            }

            ## The directory where all files generated by the build
            ## are placed.
            div {
              pom.profile.content.build.content &=
                pom.profile.content.build.content.directory?
              pom.profile.content.build.content.directory = element directory {
                pom.profile.content.build.content.directory.attributes,
                pom.profile.content.build.content.directory.content
              }
              pom.profile.content.build.content.directory.attributes = empty
              [a:defaultValue = 'target']
              pom.profile.content.build.content.directory.content = text
            }

            ## The filename (excluding the extension, and with no path
            ## information) that the produced artifact will be
            ## called.  The default value is
            ## “${artifactId}-${version}”.
            div {
              pom.profile.content.build.content &=
                pom.profile.content.build.content.finalName?
              pom.profile.content.build.content.finalName = pom.finalName
            }

            ## The list of filter properties files that are used when
            ## filtering is enabled.
            div {
              pom.profile.content.build.content &=
                pom.profile.content.build.content.filters?
              pom.profile.content.build.content.filters = pom.filters
            }

            ## Default plugin information to be made available for
            ## reference by projects derived from this one.  This
            ## plugin configuration will not be resolved or bound to
            ## the lifecycle unless referenced.  Any local
            ## configuration for a given plugin will override the
            ## plugin’s entire definition here.
            div {
              pom.profile.content.build.content &=
                pom.profile.content.build.content.pluginManagement?
              pom.profile.content.build.content.pluginManagement =
                pom.pluginManagement
            }

            ## The list of plugins to use.
            div {
              pom.profile.content.build.content &=
                pom.profile.content.build.content.plugins?
              pom.profile.content.build.content.plugins = pom.plugins
            }
          }
        }

        ## The modules (sometimes called subprojects) to build as a
        ## part of this project.  Each module listed is a relative
        ## path to the directory containing the module.  To be
        ## consistent with the way default urls are calculated from
        ## parent, it is recommended to have module names match
        ## artifact ids.
        div {
          pom.profile.content &= pom.profile.content.modules?
          pom.profile.content.modules = element modules {
            pom.profile.content.modules.attributes,
            pom.profile.content.modules.content
          }

          pom.profile.content.modules.attributes = empty

          div {
            pom.profile.content.modules.content =
              pom.profile.content.modules.content.module*

            div {
              # TODO Simplify and use pom.profile.content.module
              pom.profile.content.modules.content.module = pom.module
            }
          }
        }

        ## Distribution information for a project that enables
        ## deployment of the site and artifacts to remote web servers
        ## and repositories respectively.
        div {
          pom.profile.content &= pom.profile.content.distributionManagement?
          pom.profile.content.distributionManagement =
            pom.distributionManagement
        }

        ## Properties that can be used throughout the POM as a
        ## substitution, and are used as filters in resources if
        ## enabled. The format is “<name>value</name>”.
        div {
          pom.profile.content &= pom.profile.content.properties?
          pom.profile.content.properties = pom.properties
        }

        ## Default dependency information for projects that inherit
        ## from this one.  The dependencies in this section are not
        ## immediately resolved.  Instead, when a POM derived from
        ## this one declares a dependency described by a matching
        ## groupId and artifactId, the version and other values from
        ## this section are used for that dependency if they were not
        ## already specified.
        div {
          pom.profile.content &= pom.profile.content.dependencyManagement?
          pom.profile.content.dependencyManagement = pom.dependencyManagement
        }

        ## This element describes all of the dependencies associated
        ## with a project.  These dependencies are used to construct a
        ## classpath for your project during the build process.  They
        ## are automatically downloaded from the repositories defined
        ## in this project. See
        ## https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html
        ## for more information.
        div {
          pom.profile.content &= pom.profile.content.dependencies?
          pom.profile.content.dependencies = pom.dependencies
        }

        ## The lists of the remote repositories for discovering
        ## dependencies and extensions.
        div {
          pom.profile.content &= pom.profile.content.repositories?
          pom.profile.content.repositories = pom.repositories
        }

        ## The lists of the remote repositories for discovering
        ## plugins for builds and reports.
        div {
          pom.profile.content &= pom.profile.content.pluginRepositories?
          pom.profile.content.pluginRepositories = pom.pluginRepositories
        }

        ## This element includes the specification of report plugins
        ## to use to generate the reports on the Maven-generated site.
        ## These reports will be run when a user executes “mvn site”.
        ## All of the reports will be included in the navigation bar
        ## for browsing.
        div {
          pom.profile.content &= pom.profile.content.reporting?
          pom.profile.content.reporting = pom.reporting
        }
      }
    }
  }
}

# Shared

div {
  pom.id = element id { pom.id.attributes, pom.id.content }
  pom.id.attributes = empty
  [a:defaultValue = 'default']
  pom.id.content = text
}

div {
  pom.inherited =
    element inherited { pom.inherited.attributes, pom.inherited.content }
  pom.inherited.attributes = empty
  [a:defaultValue = 'true']
  pom.inherited.content = text
}

## The configuration as a DOM object.
##
## By default, every element content is trimmed, but starting with
## Maven 3.1.0, you can add “xml:space="preserve"” to elements you
## want to preserve whitespace.
##
## You can control how child POMs inherit configuration from parent
## POMs by adding “combine.children” or “combine.self” attributes to
## the children of the configuration element:
##
## •   “combine.children”: available values are “merge” (default) and
##     “append”
## •   “combine.self”: available values are “merge” (default) and
##     “override”
##
## See https://maven.apache.org/pom.html#Plugins and
## https://codehaus-plexus.github.io/plexus-utils/apidocs/org/codehaus/plexus/util/xml/Xpp3DomUtils.html
## for more information.
div {
  pom.configuration = element configuration {
    pom.configuration.attributes, pom.configuration.content
  }

  div {
    pom.configuration.attributes = empty

    div {
      pom.configuration.attributes &=
        pom.configuration.attributes.combine.children?
      [a:defaultValue = 'merge']
      pom.configuration.attributes.combine.children =
        attribute combine.children { 'append' | 'merge' }
    }

    div {
      pom.configuration.attributes &= pom.configuration.attributes.combine.self?
      [a:defaultValue = 'merge']
      pom.configuration.attributes.combine.self =
        attribute combine.self { 'merge' | 'override' }
    }
  }

  pom.configuration.content = pom.any.element*
}

## How to handle downloading of releases from this repository.
div {
  pom.releases =
    element releases { pom.releases.attributes, pom.releases.content }
  pom.releases.attributes = empty
  pom.releases.content = pom.repository-policy.content
}

## How to handle downloading of snapshots from this repository.
div {
  pom.snapshots =
    element snapshots { pom.snapshots.attributes, pom.snapshots.content }
  pom.snapshots.attributes = empty
  pom.snapshots.content = pom.repository-policy.content
}

div {
  pom.layout = element layout { pom.layout.attributes, pom.layout.content }
  pom.layout.attributes = empty
  [a:defaultValue = 'default']
  pom.layout.content = 'legacy' | 'default'
}

div {
  pom.directory =
    element directory { pom.directory.attributes, pom.directory.content }
  pom.directory.attributes = empty
  pom.directory.content = text
}

## Download policy.
div {
  pom.repository-policy.content = empty

  ## Whether to use this repository for downloading this type of
  ## artifact. Note: While the type of this field is “String” for
  ## technical reasons, the semantic type is actually
  ## “Boolean”.
  div {
    pom.repository-policy.content &= pom.enabled?
    pom.enabled =
      element enabled { pom.enabled.attributes, pom.enabled.content }
    pom.enabled.attributes = empty
    [a:defaultValue = 'true']
    pom.enabled.content = text
  }

  ## The frequency for downloading updates.
  div {
    pom.repository-policy.content &= pom.updatePolicy?
    pom.updatePolicy = element updatePolicy {
      pom.updatePolicy.attributes, pom.updatePolicy.content
    }
    pom.updatePolicy.attributes = empty
    [a:defaultValue = 'daily']
    pom.updatePolicy.content =
      'always' |
      'daily' |
      xsd:string { pattern = 'interval:[0-9]+' } |
      'never'
  }

  ## What to do when verification of an artifact checksum fails.
  div {
    pom.repository-policy.content &= pom.checksumPolicy?
    pom.checksumPolicy = element checksumPolicy {
      pom.checksumPolicy.attributes, pom.checksumPolicy.content
    }
    pom.checksumPolicy.attributes = empty
    [a:defaultValue = 'warn']
    pom.checksumPolicy.content = 'ignore' | 'fail' | 'warn'
  }
}

## Section for management of default plugin information for use in a
## group of POMs.
div {
  pom.pluginManagement = element pluginManagement {
    pom.pluginManagement.attributes, pom.pluginManagement.content
  }

  pom.pluginManagement.attributes = empty

  ## The list of plugins to use.
  div {
    pom.pluginManagement.content = pom.plugins*

    div {
      pom.plugins =
        element plugins { pom.plugins.attributes, pom.plugins.content }

      pom.plugins.attributes = empty

      div {
        pom.plugins.content = pom.plugin*

        ## The “plugin” element contains informations required for a
        ## plugin.
        div {
          pom.plugin =
            element plugin { pom.plugin.attributes, pom.plugin.content }

          pom.plugin.attributes = empty

          div {
            pom.plugin.content = empty

            ## The group ID of the plugin in the repository.
            div {
              pom.plugin.content &= pom.plugin.content.groupId?
              pom.plugin.content.groupId = element groupId {
                pom.plugin.content.groupId.attributes,
                pom.plugin.content.groupId.content
              }
              pom.plugin.content.groupId.attributes = empty
              [a:defaultValue = 'org.apache.maven.plugins']
              pom.plugin.content.groupId.content = text
            }

            ## The artifact ID of the plugin in the repository.
            div {
              pom.plugin.content &= pom.plugin.content.artifactId?
              pom.plugin.content.artifactId = pom.artifactId
            }

            ## The version (or valid range of versions) of the plugin
            ## to be used.
            div {
              pom.plugin.content &= pom.plugin.content.version?
              pom.plugin.content.version = pom.version
            }

            ## Whether to load Maven extensions (such as packaging and
            ## type handlers) from this plugin.  For performance
            ## reasons, this should only be enabled when necessary.
            ## Note: While the type of this field is “String” for
            ## technical reasons, the semantic type is actually
            ## “Boolean”.
            div {
              pom.plugin.content &= pom.plugin.content.extensions?
              pom.plugin.content.extensions = element extensions {
                pom.plugin.content.extensions.attributes,
                pom.plugin.content.extensions.content
              }
              pom.plugin.content.extensions.attributes = empty
              [a:defaultValue = 'false']
              pom.plugin.content.extensions.content = text
            }

            ## Multiple specifications of a set of goals to execute
            ## during the build lifecycle, each having (possibly) a
            ## different configuration.
            div {
              pom.plugin.content &= pom.executions?
              pom.executions = element executions {
                pom.executions.attributes, pom.executions.content
              }

              pom.executions.attributes = empty

              ## The “execution” element contains informations
              ## required for the execution of a plugin.
              div {
                pom.executions.content = pom.execution*

                div {
                  pom.execution = element execution {
                    pom.execution.attributes, pom.execution.content
                  }

                  pom.execution.attributes = empty

                  div {
                    pom.execution.content = empty

                    ## The identifier of this execution for labelling
                    ## the goals during the build, and for matching
                    ## executions to merge during inheritance and
                    ## profile injection.
                    div {
                      pom.execution.content &= pom.execution.content.id?
                      pom.execution.content.id = pom.id
                    }

                    ## The build lifecycle phase to bind the goals in
                    ## this execution to.  If omitted, the goals will
                    ## be bound to the default phase specified by the
                    ## plugin.
                    div {
                      pom.execution.content &= pom.phase?
                      pom.phase = element phase {
                        pom.phase.attributes, pom.phase.content
                      }
                      pom.phase.attributes = empty
                      pom.phase.content = text
                    }

                    ## The goals to execute with the given
                    ## configuration.
                    div {
                      pom.execution.content &= pom.goals?
                      pom.goals = element goals {
                        pom.goals.attributes, pom.goals.content
                      }

                      pom.goals.attributes = empty

                      div {
                        pom.goals.content = pom.goal*

                        div {
                          pom.goal = element goal {
                            pom.goal.attributes, pom.goal.content
                          }
                          pom.goal.attributes = empty
                          pom.goal.content = text
                        }
                      }
                    }

                    ## Whether any configuration should be propagated
                    ## to child POMs.  Note: While the type of this
                    ## field is “String” for technical reasons, the
                    ## semantic type is actually “Boolean”.  Default
                    ## value is “true”.
                    div {
                      pom.execution.content &= pom.execution.content.inherited?
                      pom.execution.content.inherited = pom.inherited
                    }

                    ## The configuration as a DOM object.
                    ##
                    ## By default, every element content is trimmed,
                    ## but starting with Maven 3.1.0, you can add
                    ## “xml:space="preserve"” to elements you want to
                    ## preserve whitespace.
                    ##
                    ## You can control how child POMs inherit
                    ## configuration from parent POMs by adding
                    ## “combine.children” or “combine.self” attributes
                    ## to the children of the configuration element:
                    ##
                    ## •   “combine.children”: available values are
                    ##     “merge” (default) and “append”
                    ## •   “combine.self”: available values are
                    ##     “merge” (default) and “override”
                    ##
                    ## See https://maven.apache.org/pom.html#Plugins
                    ## and
                    ## https://codehaus-plexus.github.io/plexus-utils/apidocs/org/codehaus/plexus/util/xml/Xpp3DomUtils.html
                    ## for more information.
                    div {
                      pom.execution.content &=
                        pom.execution.content.configuration?
                      pom.execution.content.configuration = pom.configuration
                    }
                  }
                }
              }
            }

            ## Additional dependencies that this project needs to
            ## introduce to the plugin’s classloader.
            div {
              pom.plugin.content &= pom.plugin.content.dependencies?
              pom.plugin.content.dependencies = pom.dependencies
            }

            ## Whether any configuration should be propagated to child
            ## POMs.  Note: While the type of this field is “String”
            ## for technical reasons, the semantic type is actually
            ## “Boolean”.
            div {
              pom.plugin.content &= pom.plugin.content.inherited?
              pom.plugin.content.inherited = pom.inherited
            }

            ## The configuration as a DOM object.
            ##
            ## By default, every element content is trimmed, but
            ## starting with Maven 3.1.0, you can add
            ## “xml:space="preserve"” to elements you want to preserve
            ## whitespace.
            ##
            ## You can control how child POMs inherit configuration
            ## from parent POMs by adding “combine.children” or
            ## “combine.self” attributes to the children of the
            ## configuration element:
            ##
            ## •   “combine.children”: available values are “merge”
            ##     (default) and “append”
            ## •   “combine.self”: available values are “merge”
            ##     (default) and “override”
            ##
            ## See https://maven.apache.org/pom.html#Plugins and
            ## https://codehaus-plexus.github.io/plexus-utils/apidocs/org/codehaus/plexus/util/xml/Xpp3DomUtils.html
            ## for more information.
            div {
              pom.plugin.content &= pom.plugin.content.configuration?
              pom.plugin.content.configuration = pom.configuration
            }
          }
        }
      }
    }
  }
}

## The default goal (or phase in Maven 2) to execute when none is
## specified for the project.  Note that in case of a multi-module
## build, only the default goal of the top-level project is relevant,
## that is, the default goals of child modules are ignored.  Since
## Maven 3, multiple goals/phases can be separated by whitespace.
div {
  pom.defaultGoal =
    element defaultGoal { pom.defaultGoal.attributes, pom.defaultGoal.content }
  pom.defaultGoal.attributes = empty
  pom.defaultGoal.content = text
}

div {
  div {
    pom.resources =
      element resources { pom.resources.attributes, pom.resources.content }

    pom.resources.attributes = empty

    div {
      pom.resources.content = pom.resource*

      ## This element describes all of the classpath resources
      ## associated with a project.
      div {
        pom.resource =
          element resource { pom.resource.attributes, pom.resource.content }
        pom.resource.attributes = empty
        pom.resource.content = pom.resource-type.content
      }
    }
  }

  div {
    pom.testResources = element testResources {
      pom.testResources.attributes, pom.testResources.content
    }

    pom.testResources.attributes = empty

    ## This element describes all of the classpath resources
    ## associated with unit tests.
    div {
      pom.testResources.content = pom.testResource*

      div {
        pom.testResource = element testResource {
          pom.testResource.attributes, pom.testResource.content
        }
        pom.testResource.attributes = empty
        pom.testResource.content = pom.resource-type.content
      }
    }
  }

  div {
    pom.resource-type.content = empty

    ## Describe the resource target path.  The path is relative to the
    ## target/classes directory, that is,
    ## “${project.build.outputDirectory}”.  For example, if you want
    ## that resource to appear in a specific package
    ## (“org.apache.maven.messages”), you must specify this element
    ## with this value: “org/apache/maven/messages”.  This is not
    ## required if you simply put the resources in that directory
    ## structure at the source, however.
    div {
      pom.resource-type.content &= pom.targetPath?
      pom.targetPath =
        element targetPath { pom.targetPath.attributes, pom.targetPath.content }
      pom.targetPath.attributes = empty
      pom.targetPath.content = text
    }

    ## Whether resources are filtered to replace tokens with
    ## parameterised values or not.  The values are taken from the
    ## “properties” element and from the properties in the files
    ## listed in the “filters” element.  Note: While the type of this
    ## field is “String” for technical reasons, the semantic type is
    ## actually “Boolean”.
    div {
      pom.resource-type.content &= pom.filtering?
      pom.filtering =
        element filtering { pom.filtering.attributes, pom.filtering.content }
      pom.filtering.attributes = empty
      [a:defaultValue = 'false']
      pom.filtering.content = text
    }

    ## Describe the directory where the resources are stored.  The
    ## path is relative to the POM.
    div {
      pom.resource-type.content &= pom.resource-type.content.directory?
      pom.resource-type.content.directory = pom.directory
    }

    ## A list of patterns to include, e.g. “**/*.xml”.
    div {
      pom.resource-type.content &= pom.includes?
      pom.includes =
        element includes { pom.includes.attributes, pom.includes.content }

      pom.includes.attributes = empty

      div {
        pom.includes.content = pom.include*

        div {
          pom.include =
            element include { pom.include.attributes, pom.include.content }
          pom.include.attributes = empty
          pom.include.content = text
        }
      }
    }

    ## A list of patterns to exclude, e.g. “**/*.xml”.
    div {
      pom.resource-type.content &= pom.excludes?
      pom.excludes =
        element excludes { pom.excludes.attributes, pom.excludes.content }

      pom.excludes.attributes = empty

      div {
        pom.excludes.content = pom.exclude*

        div {
          pom.exclude =
            element exclude { pom.exclude.attributes, pom.exclude.content }
          pom.exclude.attributes = empty
          pom.exclude.content = text
        }
      }
    }
  }
}

## The filename (excluding the extension, and with no path
## information) that the produced artifact will be called.  The
## default value is “${artifactId}-${version}”.
div {
  pom.finalName =
    element finalName { pom.finalName.attributes, pom.finalName.content }
  pom.finalName.attributes = empty
  pom.finalName.content = text
}

## The list of filter properties files that are used when filtering is
## enabled.
div {
  pom.filters = element filters { pom.filters.attributes, pom.filters.content }

  pom.filters.attributes = empty

  div {
    pom.filters.content = pom.filter*

    div {
      pom.filter = element filter { pom.filter.attributes, pom.filter.content }
      pom.filter.attributes = empty
      pom.filter.content = text
    }
  }
}

## The name of the issue management system, for example, Bugzilla, or
## the name of the continuous integration system, for example,
## “continuum”.
div {
  pom.system = element system { pom.system.attributes, pom.system.content }
  pom.system.attributes = empty
  pom.system.content = text
}

## The directory where compiled application classes are placed or
## where to store all of the generated reports.
div {
  pom.outputDirectory = element outputDirectory {
    pom.outputDirectory.attributes, pom.outputDirectory.content
  }
  pom.outputDirectory.attributes = empty
  pom.outputDirectory.content = text
}

## A repository contains the information needed for establishing
## connections with remote repository.
div {
  pom.repository-content = empty

  ## How to handle downloading of releases from this repository.
  div {
    pom.repository-content &= pom.repository-content.releases?
    pom.repository-content.releases = pom.releases
  }

  ## How to handle downloading of snapshots from this repository.
  div {
    pom.repository-content &= pom.repository-content.snapshots?
    pom.repository-content.snapshots = pom.snapshots
  }

  ## A unique identifier for a repository.  This is used to match the
  ## repository to configuration in the “settings.xml” file, for
  ## example.  Furthermore, the identifier is used during POM
  ## inheritance and profile injection to detect repositories that
  ## should be merged.
  div {
    pom.repository-content &= pom.repository-content.id?
    pom.repository-content.id = pom.id
  }

  ## Human readable name of the repository.
  div {
    pom.repository-content &= pom.repository-content.name?
    pom.repository-content.name = pom.name
  }

  ## The url of the repository, in the form
  ## “protocol://hostname/path”.
  div {
    pom.repository-content &= pom.repository-content.url?
    pom.repository-content.url = pom.url
  }

  ## The type of layout this repository uses for locating and storing
  ## artifacts - can be “legacy” or “default”.
  div {
    pom.repository-content &= pom.repository-content.layout?
    pom.repository-content.layout = pom.layout
  }
}

## The full name of the developer or contributor.
div {
  pom.person-content.name = pom.name
}

## The email address of the developer or contributor.
div {
  pom.email = element email { pom.email.attributes, pom.email.content }
  pom.email.attributes = empty
  pom.email.content = text
}

## The organization to which the developer or contributor belongs.
div {
  pom.person-content.organization = element organization {
    pom.person-content.organization.attributes,
    pom.person-content.organization.content
  }
  pom.person-content.organization.attributes = empty
  pom.person-content.organization.content = text
}

## The URL of the organization.
div {
  pom.organizationUrl = element organizationUrl {
    pom.organizationUrl.attributes, pom.organizationUrl.content
  }
  pom.organizationUrl.attributes = empty
  pom.organizationUrl.content = text
}

## The roles the developer or contributor plays in the project.  Each
## role is described by a “role” element, the body of which is a role
## name. This can also be used to describe the contribution.
div {
  pom.roles = element roles { pom.roles.attributes, pom.roles.content }

  pom.roles.attributes = empty

  div {
    pom.roles.content = pom.role*

    div {
      pom.role = element role { pom.role.attributes, pom.role.content }
      pom.role.attributes = empty
      pom.role.content = text
    }
  }
}

## The timezone the developer or contributor is in.  Typically, this
## is a number in the range -12 to +14, see
## http://en.wikipedia.org/wiki/UTC%E2%88%9212:00 and
## http://en.wikipedia.org/wiki/UTC%2B14:00, or a valid time zone id
## like “America/Montreal” (UTC-05:00) or “Europe/Paris” (UTC+01:00).
div {
  pom.timezone =
    element timezone { pom.timezone.attributes, pom.timezone.content }
  pom.timezone.attributes = empty
  pom.timezone.content = text
}
