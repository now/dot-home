# contents: zsh(1) user RC.
#
# Copyright © 2002,2003,2004,2005,2006 Nikolai Weibull <now@bitwi.se>

local -A timings

timings[start]=$(date +%s.%N)

# 1  Shell and Terminal Settings
# ——————————————————————————————

HISTFILE=~/.zshistory
SAVEHIST=${HISTSIZE::=1024}
READNULLCMD=$PAGER
REPORTTIME=300

setopt autocd autopushd                           \
       completeinword nolistambiguous nolisttypes \
       extendedhistory histnostore                \
       rcexpandparam rcquotes                     \
       correct dvorak                             \
       nonotify                                   \
       nobeep

unset TERMCAP

autoload -U add-zsh-hook
autoload -U terminal-title

add-zsh-hook precmd set-terminal-title-to-pwd
add-zsh-hook preexec set-terminal-title-from-command
add-zsh-hook chpwd list-directory-on-chpwd

# TODO: Need to wrap this in a test so that we only call it if LS_COLORS
# reflects the settings of another terminal.  The problem is that in most cases
# this won’t help, as when we log in we set if for $TERM = linux and then
# whenever we create a new window in screen that will be the parent terminal.
# Thus, testing a variable that stores the last saved $TERM that dircolors was
# called for doesn’t work.  One way would be to start screen in a terminal that
# we then use in screen.
#
# We could also test the number of colors of the
# terminal and set up things based on that.
eval $(dircolors ~/.dircolors 2> /dev/null)


timings[terminal]=$(date +%s.%N)

# 2  Modules
# ——————————

zmodload -i zsh/complist


timings[modules]=$(date +%s.%N)

# 3  Command-line Completion
# ——————————————————————————

autoload -U compinit; compinit

zstyle '*' hosts ${REMOTEHOST:-${SSH_CLIENT%% *}} shell.scorpionshops.com

# TODO: Remove?  I mean, how often do they get in the way?
zstyle ':completion:*:*:(^rm):*:*files' ignored-patterns \
  '*?.o' '*?.~*~' '*?.class' '*?.obj' '*?.sw[po]'
zstyle ':completion::*:(-command-|export):*' fake-parameters \
  ACCEPT_KEYWORDS:scalar \
  USE:scalar

zstyle ':completion:*' squeeze-slashes yes
zstyle ':completion:*' ignore-parents parent pwd
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}' 'r:|[:.,_-]=** r:|=**'
zstyle ':completion:*' remove-all-dups yes
zstyle ':completion:*' group-name ""
zstyle ':completion:*' list-separator ""
zstyle ':completion:*:options' auto-description "specify ‘%d’"
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion::complete:*' use-cache yes

zstyle ':completion:*:processes' command 'ps -U $EUID 2>/dev/null'
zstyle ':completion:*:manuals' separate-sections true

#zstyle ':completion:::::' completer _expand_alias _expand _complete _prefix _ignored
# TODO: Remove _prefix?  It doesn’t seem to change anything.
#zstyle ':completion::*:::' completer _complete _prefix _ignored
#zstyle ':completion::prefix:::' completer _complete

#zstyle ':completion:*:expand:*' tag-order all-expansions

# TODO: Verbose seems to be default anyway?
#zstyle ':completion:*' verbose yes


timings[completion]=$(date +%s.%N)

# 4  ZLE Keybindings
# ——————————————————

autoload -U forward-word-match backward-word-match \
            replace-string backward-kill-word-match

for command in zle/vim-increase-number zle/self-insert-redir zle/up-directory \
               zle/cd-from-list zle/cd-to-alternate-directory \
               zle/yank-x11-clipboard zle/sudo-command-line \
               history-beginning-search-menu insert-digraph; do
  autoload -U $command
  zle -N $command
done

source $fpath/keeper(N)

zle -N zle/vim-decrease-number zle/vim-increase-number
zle -N replace-pattern replace-string

zle -N backward-kill-to-space-or-/ backward-kill-word-match
zstyle ':zle:backward-kill-to-space-or-/' word-chars '*?_-.[]~=&;!#$%^(){}<>:@,\\'

zle -N forward-parameter forward-word-match
zle -N backward-parameter backward-word-match
zstyle ':zle:(forward|backward)-parameter' word-style shell

zle -C complete-kept-result complete-word _generic
zstyle ':completion:complete-kept-result:*' completer _insert_kept

bindkey -arp '^['
bindkey -a \
  '(' backward-parameter \
  ')' forward-parameter \
  '/' history-incremental-search-backward \
  '?' history-incremental-search-forward \
  '^A' zle/vim-increase-number \
  '^G' zle/cd-from-list \
  '^O' accept-line-and-down-history \
  '^R' redo \
  '^U' zle/up-directory \
  '^X' zle/vim-decrease-number \
  '^^' zle/cd-to-alternate-directory \
  'L' vi-change-whole-line \
  'l' vi-substitute \
  's' vi-forward-char \
  'u' undo \
  ':s' replace-pattern

bindkey -rp '^['
bindkey \
  '^?' backward-delete-char \
  '^D' list-choices \
  '^H' backward-delete-char \
  '^K' insert-digraph \
  '^N' _history-complete-newer \
  '^O' accept-line-and-down-history \
  '^P' _history-complete-older \
  '^Q' push-line-or-edit \
  '^U' undo \
  '^W' backward-kill-to-space-or-/ \
  '^X$' insert-last-word \
  '^X^K' complete-kept-result \
  '^Xk' complete-kept-result \
  '^X^L' history-beginning-search-menu \
  '^Xp' copy-prev-shell-word \
  '^X^S' zle/sudo-command-line \
  '^Y' zle/yank-x11-clipboard \
  '^Z' vi-cmd-mode \
  '^^' zle/cd-to-alternate-directory \
  ' ' magic-space \
  ${(s: :):-${^${(s::):-'|<>&'}}' zle/self-insert-redir'}


timings[keys]=$(date +%s.%N)

# 5  Functions And Aliases

# Takes about 4–5 ms..  TODO: Cache prompt results.
autoload -U promptinit; promptinit
prompt now

zstyle ':mime:*' use-cache yes
autoload -U zsh-mime-setup; zsh-mime-setup

autoload -U zargs zcalc zmv $ZDOTDIR/functions/autoload/*(:t)

for command in cp mv mkdir; do
  alias $command="nocorrect $command"
done

for command in dr foldl foldr ri; do
  alias $command="noglob $command"
done
alias mmv='noglob zmv -W'

unset command

alias \
  duh='du --si --max-depth=1' \
  gp='grep --color -n -P' \
  h='fc -lfiD' \
  p='ps --User $USERNAME --format "pid= comm=" -H' \
  pp='ps --User $USERNAME --format "pid= command=" -H' \
  top='top -u $USERNAME'

alias \
  mp='mplayer -fs -stop-xscreensaver' \
  tv='DISPLAY=:0.1 mplayer -geometry 1024x600+0+75 -stop-xscreensaver' \
  hp='mplayer -ao alsa:device=secondary -fs -stop-xscreensaver' \
  ro='vimless' \
  v='vim' \
  y='xview' \
  lv='sudo tail -F /var/log/messages' \
  pv='evince -f'

alias \
  ls='ls --color' \
  a='ls' \
  o='ls -l --si' \
  aa='a -A' \
  oo='o -A'
i () { command ls -A -l --si --color=always -b $* | ${LISTER:-less} }


timings[functions]=$(date +%s.%N)

# 11  Operating System Specific Settings
# ——————————————————————————————————————

[[ -f $ZDOTDIR/rc/os/$(uname -o 2> /dev/null) ]] && source $ZDOTDIR/rc/os/$(uname -o)


timings[os]=$(date +%s.%N)

# 11  Host Specific Settings
# ——————————————————————————

[[ -f $ZDOTDIR/rc/hosts/$HOST ]] && source $ZDOTDIR/rc/hosts/$HOST


timings[host]=$(date +%s.%N)


timings[end]=$(date +%s.%N)

# About 0.28 seconds at the moment.
for key in ${(k)timings:#(start|end)}; do
  float smallest="$timings[end]" timing="$timings[$key]"
  for other in ${(k)timings:#(end|$key)}; do
    float delta
    (( delta = $timings[$key] - $timings[$other] ))
    (( smallest = delta > 0.00000000001 && delta < smallest ? delta : smallest ))
  done
  printf "%s: %.3f\n" $key smallest
done | sort -k 2rn
printf "total: %.3f\n" $(($timings[end] - $timings[start]))
unset timings key other
