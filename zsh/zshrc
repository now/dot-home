# contents: zsh(1) user RC.
#
# Copyright © 2002,2003,2004,2005,2006 Nikolai Weibull <now@bitwi.se>

local -A timings

timings[start]=$(date +%s.%N)



# 1  Parameters {{{1
# =============


HISTFILE=~/.local/var/lib/zsh/history
HISTSIZE=1024
READNULLCMD=$PAGER
REPORTTIME=300
SAVEHIST=$HISTSIZE
watch=(notme)
unset BAUD


timings[parameters]=$(date +%s.%N)



# 2  Limits {{{1
# =========


limit coredumpsize 30m >& /dev/null


timings[limits]=$(date +%s.%N)



# 3  Shell Settings {{{1
# =================


zmodload -i zsh/parameter
sleep 0
[[ -n $(whence script) ]] && unhash script


timings[settings]=$(date +%s.%N)



# 4  Shell Options {{{1
# ================

setopt autocd                                 \
       autopushd                              \
       completeinword nolistambiguous         \
       extendedhistory histnostore            \
       rcexpandparam rcquotes                 \
       correct dvorak                         \
       nonotify                               \
       nobeep


timings[options]=$(date +%s.%N)



# 5  Terminal Settings {{{1
# ====================


stty -ixon                    # turn off flowcontrol for the terminal
export TERMCAP=


timings[terminal]=$(date +%s.%N)



# 5.1. Screen Title Updating
# --------------------------

autoload -U add-zsh-hook
autoload -U terminal-title

_terminal-title-restore-to-pwd () {
  # TODO: There should be a TERMTITLEMAX variable defined by terminal-title?
  terminal-title "$(print -P "%20<^<%~")"
}

add-zsh-hook precmd _terminal-title-restore-to-pwd
add-zsh-hook preexec set-terminal-title-from-command


timings[title]=$(date +%s.%N)



# 6  Modules {{{1
# ==========


zmodload -a zsh/stat stat
zmodload -a zsh/zprof zprof
zmodload -i zsh/complist


timings[modules]=$(date +%s.%N)



# 7  Command-line Completion {{{1
# ==========================


autoload -U compinit; compinit -d ~/.local/var/cache/zsh/compdump


# 7.1. Completion Styles {{{2
# ----------------------

zstyle '*' hosts ${REMOTEHOST:-${SSH_CLIENT%% *}} shell.scorpionshops.com

# Ignore users that don’t have a login shell listed in /etc/shells.
#zstyle '*:users' ignored-patterns \
#  ${${(M)${(f)"$(</etc/passwd)"}:#*:(${~${(j:|:)${(f)"$(</etc/shells)"}:#[[:space:]]#\#*}})}%%:*}
zstyle ':completion:*:*:(^rm):*:*files' ignored-patterns \
  '*?.o' '*?.~*~' '*?.class' '*?.obj' '*?.sw[po]'

zstyle ':completion:*' squeeze-slashes yes

zstyle ':completion::complete:*' use-cache yes
zstyle ':completion::complete:*' cache-path $XDG_CACHE_HOME/zsh/completion-$HOST

zstyle ':completion:::::' completer _expand_alias _expand _complete _prefix _ignored
zstyle ':completion::prefix:::' completer _complete

zstyle ':completion:*' expand prefix suffix
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'r:|[:.,_-]=** r:|=**'
zstyle ':completion:*:*:-subscript-:*' tag-order indexes parameters
zstyle ':completion:*:expand:*' tag-order all-expansions

zstyle ':completion::*:(-command-|export):*' fake-parameters \
  ACCEPT_KEYWORDS:scalar \
  USE:scalar
zstyle ':completion:*:ignored:*' single-ignored menu

zstyle ':completion:*:kill:*' force-list always
zstyle ':completion:*:processes' command 'ps -U ${EUID} 2>/dev/null'

zstyle ':completion:*' ignore-parents parent pwd
zstyle ':completion:*:rm:*' ignore-line yes


# 7.2. Completion Formats and Messages {{{2
# ------------------------------------

eval $(dircolors ~/.local/etc/dircolors 2> /dev/null)

zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS} tc=7

zstyle ':completion:*' verbose yes
zstyle ':completion:*' list-separator "                "
zstyle ':completion:*:options' auto-description "specify ‘%d’"

zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=8=9'

zstyle ':completion:*:directory-stack' list-colors "=(#b)[0-9]#[[:space:]]#(*)=8=${${LS_COLORS#*di=}%%:*}"


# 7.3. Completion Groups {{{2
# ----------------------

zstyle ':completion:*' group-name ''
zstyle ':completion:*:manuals' separate-sections true


# 7.4. History Completion {{{2
# -----------------------

zstyle ':completion:*:history-words' stop yes
zstyle ':completion:*:history-words' remove-all-dups yes
zstyle ':completion:*:history-words' list no
zstyle ':completion:*:history-words' menu yes


# }}}2


timings[completion]=$(date +%s.%N)



# 8  ZLE Keybindings {{{1
# ==================


# 8.1  VI Command Mode {{{2
# --------------------

# 8.1.1  Movement

bindkey -a "t" down-line-or-history
bindkey -a "n" up-line-or-history
bindkey -a "s" vi-forward-char

autoload -U forward-word-match
autoload -U backward-word-match
zle -N forward-parameter forward-word-match
zle -N backward-parameter backward-word-match
zstyle ':zle:forward-parameter' word-style shell
zstyle ':zle:backward-parameter' word-style shell
bindkey -a ")" forward-parameter
bindkey -a "(" backward-parameter

# 8.1.2  Searching

bindkey -a "/" history-incremental-search-backward
bindkey -a "?" history-incremental-search-forward
bindkey -a "j" vi-find-next-char-skip
bindkey -a "J" vi-find-prev-char-skip
bindkey -a "k" vi-repeat-search
bindkey -a "K" vi-rev-repeat-search 

# 8.1.3  Change

bindkey -a "L" vi-change-whole-line
bindkey -a "T" vi-join
bindkey -a "l" vi-substitute

# 8.1.4  Miscellaneous

bindkey -arp "^["
bindkey -ar "#"
bindkey -ar "+"
bindkey -ar "\-"
bindkey -ar "^?"
bindkey -a "^[" vi-cmd-mode
bindkey -a "^L" accept-line-and-down-history
bindkey -a "^R" redo
bindkey -a "N" run-help
bindkey -a "u" undo
bindkey -a "~" vi-oper-swap-case

autoload -Uz vim-increase-number
zle -N vim-increase-number vim-increase-number
zle -N vim-decrease-number vim-increase-number
bindkey -a "^A" vim-increase-number
bindkey -a "^X" vim-decrease-number

autoload -Uz replace-string
zle -N replace-pattern replace-string
bindkey -a ":s" replace-pattern

_up-directory () {
  up $NUMERIC
  zle reset-prompt
}
zle -N up-directory _up-directory
bindkey -a "^U" up-directory

_cd-list () {
  print
  d
  zle reset-prompt
}
zle -N cd-list _cd-list
bindkey -a "^G" cd-list

_cd-to-alternate-directory () {
  cd ~+1
  zle reset-prompt
}
zle -N cd-to-alternate-directory _cd-to-alternate-directory
bindkey -a "^^" cd-to-alternate-directory


# 8.2  VI Insert Mode {{{2
# -------------------

# 8.2.1  Completion

bindkey "^D" list-choices
bindkey "^I" complete-word
bindkey "^P" _history-complete-older
bindkey "^N" _history-complete-newer
bindkey "^U" undo

autoload -Uz insert-digraph
zle -N insert-digraph
bindkey "^K" insert-digraph

# 8.2.4  Miscellaneous

_complete-previous-output () {
  compadd - ${(f)"$(eval $(fc -l -n -1))"}
}
zle -C complete-previous-output complete-word _complete-previous-output

source $fpath/keeper(N)
_complete-kept () {
  compadd -a kept
}
zle -C complete-kept complete-word _complete-kept

bindkey -r "^O"
bindkey -rp "^X"
bindkey -r "^X"
bindkey -r "^?"
bindkey -rp "^["
bindkey "^O$" insert-last-word
bindkey "^Ok" complete-kept
bindkey "^O^k" complete-kept
bindkey "^Om" _most_recent_file
bindkey "^Oo" complete-previous-output
bindkey "^O^O" complete-previous-output
bindkey "^Op" copy-prev-shell-word
bindkey "^O?" _complete_help                  
bindkey "^E" list-expand
bindkey "^F" describe-key-briefly
bindkey "^C" vi-cmd-mode
bindkey "^L" accept-line-and-down-history
bindkey "^R" redisplay
bindkey "^Q" push-line-or-edit
bindkey " " magic-space
bindkey "^H" backward-delete-char
bindkey "^?" backward-delete-char

autoload -U history-beginning-search-menu
zle -N history-beginning-search-menu
bindkey "^X^L" history-beginning-search-menu

autoload -U backward-kill-word-match
zle -N backward-kill-to-space-or-/ backward-kill-word-match
zstyle ':zle:backward-kill-to-space-or-/' word-chars '*?_-.[]~=&;!#$%^(){}<>:@,\\'
bindkey "^W" backward-kill-to-space-or-/

_sudo-command-line () {
  [[ $BUFFER != sudo\ * ]] && LBUFFER="sudo $LBUFFER"
}
zle -N sudo-command-line _sudo-command-line
bindkey "^Os" sudo-command-line

_paste-x11-clipboard () {
  [[ -x $(whence xclip) ]] || return
  LBUFFER+=$(xclip -out)
}
zle -N paste-x11-clipboard _paste-x11-clipboard
bindkey "^Y" paste-x11-clipboard

_self-insert-redir () {
  integer len=$#LBUFFER
  zle self-insert
  (( $len >= $#LBUFFER )) && LBUFFER[-1]=" $LBUFFER[-1]"
}
zle -N _self-insert-redir
bindkey ${(s: :):-${^${(s::):-"|<>&"}}" _self-insert-redir"}

bindkey "^^" cd-to-alternate-directory


# 8.3  List-scroll Mode {{{2
# ---------------------

bindkey -M listscroll 't' down-line-or-history
bindkey -M listscroll 'q' send-break


# }}}2


timings[keys]=$(date +%s.%N)



# 9  Function Autoloading {{{1
# =======================


# Takes about 4–5 ms..  TODO: Cache prompt results.
autoload -U promptinit; promptinit
prompt now

autoload -U up d zcalc

autoload -U zmv
alias mmv='noglob zmv -W'

# Takes about 13 ms.  Now takes 1.3 ms (due to caching).
zstyle ':mime:*' mailcap $XDG_CONFIG_HOME/mailcap
zstyle ':mime:*' use-cache yes
autoload -U zsh-mime-setup; zsh-mime-setup

autoload -U zargs


timings[functions]=$(date +%s.%N)



# 10  Aliases {{{1
# ===========


# 10.1  Convenience Aliases/Macros {{{2
# --------------------------------

alias v='vim'
alias ro='vimless'
alias view='vimless'
e () {
  if vim --serverlist 2>/dev/null | grep -q '^VIM$'; then
    if (( $# > 0 )); then
      vim --servername vim --remote $*
    fi
    screen -X select 6
  else
    screen -t 'edit' 6 vim --servername vim $*
  fi
}

alias mv='nocorrect mv'
alias cp='nocorrect cp'
alias mkdir='nocorrect mkdir'
alias duh='du --si --max-depth=1'
alias p='ps --User $USERNAME --format "pid= comm=" -H'
alias pp='ps --User $USERNAME --format "pid= command=" -H'
aspell () { command aspell --home-dir ~/.local/var/lib/aspell $* }
sbcl () { command sbcl $* --userinit ~/.local/etc/sbclrc }
alias gp='grep --color -n -P'
alias top='top -u $USERNAME'
alias mp='mplayer'
alias mpq='mplayer -nosound'
alias tv='DISPLAY=:0.1 mplayer'
alias hp='mplayer -ao alsa:device=secondary'
alias ri='noglob ri'
alias h='fc -lfiD'
alias t='cd ~+1'
alias svn='svn --config-dir ~/.local/var/lib/subversion'
alias y='xview'

alias -g ...='../..'
alias -g ....='../../..'
alias -g .....='../../../..'

cd () {
  local dir=$1
  if [[ -f $dir ]]; then
    dir=$dir:h
  fi

  local result="${${:-"$(builtin cd $dir 2>&1 1>/dev/null)"}#cd:cd:1: }"
  if (( $#result == 0 )); then
    builtin cd $dir
  else
    print -u 2 "cd: $result"
    return 1
  fi
}

chpwd_functions+=(chpwd_list)

chpwd_list () {
  zle || ls --color
}

dp () {
  dirstack=($* $dirstack)
}

dr () {
  if (( $# == 0 )); then
    declare -a existing_dirs
    for dir in $dirstack; do
      if [[ -d $dir ]]; then
        existing_dirs+=$dir
      fi
    done
    dirstack=($existing_dirs)
  else
    dirstack=(${dirstack:#$~1})
  fi
}
alias dr='noglob dr'


# 10.2  ls Aliases {{{2
# ----------------

alias ls='ls --color'
alias a='ls'
alias o='ls -l --si'
alias aa='a -A'
alias oo='o -A'
i () { command ls -A -l --si --color=always -b "$@" | ${LISTER:-less} }


# 10.3  Shell Aliases {{{2
# -------------------

freload () {
  while (( $# )); do
    unfunction $1
    autoload -U $1
    shift
  done
}


# }}}2


timings[aliases]=$(date +%s.%N)



# 11  Host Specific Settings {{{1
# ==========================


[[ -f $ZDOTDIR/rc/hosts/$HOST ]] && source $ZDOTDIR/rc/hosts/$HOST


timings[host]=$(date +%s.%N)



# }}}1


timings[end]=$(date +%s.%N)

# About 0.28 seconds at the moment.
for key in ${(k)timings:#(start|end)}; do
  float smallest="$timings[end]" timing="$timings[$key]"
  for other in ${(k)timings:#(end|$key)}; do
    float delta
    (( delta = $timings[$key] - $timings[$other] ))
    (( smallest = delta > 0.00000000001 && delta < smallest ? delta : smallest ))
  done
  printf "%s: %.3f\n" $key smallest
done | sort -k 2rn
printf "total: %.3f\n" $(($timings[end] - $timings[start]))
