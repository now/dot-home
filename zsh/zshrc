# contents: zsh(1) user RC.
#
# Copyright © 2002,2003,2004,2005,2006 Nikolai Weibull <now@bitwi.se>

local -A timings

timings[start]=$(date +%s.%N)



# 1  Shell and Terminal Settings
# ==============================


HISTFILE=~/.zshistory
SAVEHIST=${HISTSIZE::=1024}
READNULLCMD=$PAGER
REPORTTIME=300

setopt autocd autopushd                           \
       completeinword nolistambiguous nolisttypes \
       extendedhistory histnostore                \
       rcexpandparam rcquotes                     \
       correct dvorak                             \
       nonotify                                   \
       nobeep

export TERMCAP=

autoload -U add-zsh-hook
autoload -U terminal-title

_terminal-title-restore-to-pwd () {
  # TODO: There should be a TERMTITLEMAX variable defined by terminal-title?
  terminal-title "$(print -P "%20<^<%~")"
}

add-zsh-hook precmd _terminal-title-restore-to-pwd
add-zsh-hook preexec set-terminal-title-from-command
add-zsh-hook chpwd list-directory-on-chpwd

eval $(dircolors ~/.dircolors 2> /dev/null)

timings[terminal]=$(date +%s.%N)



# 6  Modules
# ==========


zmodload -i zsh/complist


timings[modules]=$(date +%s.%N)



# 7  Command-line Completion
# ==========================


autoload -U compinit; compinit

zstyle '*' hosts ${REMOTEHOST:-${SSH_CLIENT%% *}} shell.scorpionshops.com

# TODO: Remove?  I mean, how often do they get in the way?
zstyle ':completion:*:*:(^rm):*:*files' ignored-patterns \
  '*?.o' '*?.~*~' '*?.class' '*?.obj' '*?.sw[po]'
zstyle ':completion::*:(-command-|export):*' fake-parameters \
  ACCEPT_KEYWORDS:scalar \
  USE:scalar

zstyle ':completion:*' squeeze-slashes yes
zstyle ':completion:*' ignore-parents parent pwd
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}' 'r:|[:.,_-]=** r:|=**'
zstyle ':completion:*' remove-all-dups yes
zstyle ':completion:*' group-name ""
zstyle ':completion:*' list-separator ""
zstyle ':completion:*:options' auto-description "specify ‘%d’"
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion::complete:*' use-cache yes

zstyle ':completion:*:processes' command 'ps -U $EUID 2>/dev/null'
zstyle ':completion:*:manuals' separate-sections true

#zstyle ':completion:::::' completer _expand_alias _expand _complete _prefix _ignored
# TODO: Remove _prefix?  It doesn’t seem to change anything.
#zstyle ':completion::*:::' completer _complete _prefix _ignored
#zstyle ':completion::prefix:::' completer _complete

#zstyle ':completion:*:expand:*' tag-order all-expansions

# TODO: Verbose seems to be default anyway?
#zstyle ':completion:*' verbose yes


timings[completion]=$(date +%s.%N)



# 8  ZLE Keybindings
# ==================


# 8.1  VI Command Mode
# --------------------

bindkey -a 's' vi-forward-char

autoload -U forward-word-match backward-word-match
zle -N forward-parameter forward-word-match
zle -N backward-parameter backward-word-match
zstyle ':zle:(forward|backward)-parameter' word-style shell
bindkey -a ')' forward-parameter
bindkey -a '(' backward-parameter

bindkey -a '/' history-incremental-search-backward
bindkey -a '?' history-incremental-search-forward

bindkey -a 'L' vi-change-whole-line
bindkey -a 'l' vi-substitute

bindkey -arp '^['
bindkey -a '^L' accept-line-and-down-history
bindkey -a '^R' redo
bindkey -a 'u' undo

autoload -Uz vim-increase-number
zle -N vim-increase-number vim-increase-number
zle -N vim-decrease-number vim-increase-number
bindkey -a '^A' vim-increase-number
bindkey -a '^X' vim-decrease-number

autoload -Uz replace-string
zle -N replace-pattern replace-string
bindkey -a ':s' replace-pattern

_up-directory () {
  up $NUMERIC
  zle reset-prompt
}
zle -N up-directory _up-directory
bindkey -a '^U' up-directory

_cd-list () {
  print
  d
  zle reset-prompt
}
zle -N cd-list _cd-list
bindkey -a '^G' cd-list

_cd-to-alternate-directory () {
  (( $#dirstack > 0 )) || return
  cd ~+1
  zle reset-prompt
}
zle -N cd-to-alternate-directory _cd-to-alternate-directory
bindkey -a '^^' cd-to-alternate-directory


# 8.2  VI Insert Mode
# -------------------

bindkey '^D' list-choices
#bindkey '^I' complete-word
bindkey '^P' _history-complete-older
bindkey '^N' _history-complete-newer
bindkey '^U' undo

autoload -Uz insert-digraph
zle -N insert-digraph
bindkey '^K' insert-digraph

_complete-previous-output () {
  compadd - ${(f)"$(eval $(fc -l -n -1))"}
}
zle -C complete-previous-output complete-word _complete-previous-output

source $fpath/keeper(N)
_complete-kept () {
  compadd -a kept
}
zle -C complete-kept complete-word _complete-kept

bindkey -rp '^X'
bindkey -r '^X'
bindkey -rp '^['
bindkey -r '^O'
bindkey '^O$' insert-last-word
bindkey '^Ok' complete-kept
bindkey '^O^k' complete-kept
bindkey '^Om' _most_recent_file
bindkey '^Oo' complete-previous-output
bindkey '^O^O' complete-previous-output
bindkey '^Op' copy-prev-shell-word
bindkey '^O?' _complete_help                  
bindkey '^L' accept-line-and-down-history
bindkey '^R' redisplay
bindkey '^Q' push-line-or-edit
bindkey ' ' magic-space
bindkey '^H' backward-delete-char
bindkey '^?' backward-delete-char
bindkey '^Z' vi-cmd-mode

autoload -U history-beginning-search-menu
zle -N history-beginning-search-menu
bindkey '^X^L' history-beginning-search-menu

autoload -U backward-kill-word-match
zle -N backward-kill-to-space-or-/ backward-kill-word-match
zstyle ':zle:backward-kill-to-space-or-/' word-chars '*?_-.[]~=&;!#$%^(){}<>:@,\\'
bindkey '^W' backward-kill-to-space-or-/

_sudo-command-line () {
  [[ $BUFFER != sudo\ * ]] && LBUFFER="sudo $LBUFFER"
}
zle -N sudo-command-line _sudo-command-line
bindkey '^Os' sudo-command-line

_paste-x11-clipboard () {
  LBUFFER+=$(xclip -out 2> /dev/null)
}
zle -N paste-x11-clipboard _paste-x11-clipboard
bindkey '^Y' paste-x11-clipboard

_self-insert-redir () {
  integer len=$#LBUFFER
  zle self-insert
  (( $len >= $#LBUFFER )) && LBUFFER[-1]=" $LBUFFER[-1]"
}
zle -N _self-insert-redir
bindkey ${(s: :):-${^${(s::):-'|<>&'}}' _self-insert-redir'}

bindkey '^^' cd-to-alternate-directory


# 8.3  List-scroll Mode
# ---------------------

# TODO: Simpler to just use C-c or just type what we want, so remove.
#bindkey -M listscroll 'q' send-break


timings[keys]=$(date +%s.%N)



# 9  Function Autoloading
# =======================


# Takes about 4–5 ms..  TODO: Cache prompt results.
autoload -U promptinit; promptinit
prompt now

zstyle ':mime:*' use-cache yes
autoload -U zsh-mime-setup; zsh-mime-setup

autoload -U zargs zcalc zmv
autoload -U $ZDOTDIR/functions/autoload/*(:t)


timings[functions]=$(date +%s.%N)



# 10  Aliases
# ===========


# 10.1  Convenience Aliases/Macros
# --------------------------------

alias v='vim'
alias ro='vimless'
e () {
  if vim --serverlist 2>/dev/null | grep -q '^VIM$'; then
    if (( $# > 0 )); then
      vim --servername vim --remote $*
    fi
    screen -X select 6
  else
    screen -t 'edit' 6 vim --servername vim $*
  fi
}

for command in cp mv mkdir; do
  alias $command="nocorrect $command"
done

for command in dr foldl foldr ri; do
  alias $command="noglob $command"
done
alias mmv='noglob zmv -W'

unset command

alias duh='du --si --max-depth=1'
alias p='ps --User $USERNAME --format "pid= comm=" -H'
alias pp='ps --User $USERNAME --format "pid= command=" -H'
alias gp='grep --color -n -P'
alias top='top -u $USERNAME'
alias mp='mplayer -fs -stop-xscreensaver'
alias tv='DISPLAY=:0.1 mplayer -geometry 1024x600+0+75 -stop-xscreensaver'
alias hp='mplayer -ao alsa:device=secondary -fs -stop-xscreensaver'
alias h='fc -lfiD'
alias y='xview'
alias lv='sudo tail -F /var/log/messages'
alias pv='evince -f'

cd () {
  if (( $# == 1 )) && [[ -f $1 ]]; then
    set $1:h
  fi

  local result="${${:-"$(builtin cd $* 2>&1 1>/dev/null)"}#cd:cd:1: }"
  if (( $#result == 0 )); then
    builtin cd $*
  else
    print -u 2 "cd: $result"
    return 1
  fi
}

dp () {
  dirstack=($* $dirstack)
}



# 10.2  ls Aliases
# ----------------

alias ls='ls --color'
alias a='ls'
alias o='ls -l --si'
alias aa='a -A'
alias oo='o -A'
i () { command ls -A -l --si --color=always -b $* | ${LISTER:-less} }


timings[aliases]=$(date +%s.%N)



# 11  Operating System Specific Settings
# ======================================


[[ -f $ZDOTDIR/rc/os/$(uname -o 2> /dev/null) ]] && source $ZDOTDIR/rc/os/$(uname -o)


timings[os]=$(date +%s.%N)



# 11  Host Specific Settings
# ==========================


[[ -f $ZDOTDIR/rc/hosts/$HOST ]] && source $ZDOTDIR/rc/hosts/$HOST


timings[host]=$(date +%s.%N)



timings[end]=$(date +%s.%N)

# About 0.28 seconds at the moment.
for key in ${(k)timings:#(start|end)}; do
  float smallest="$timings[end]" timing="$timings[$key]"
  for other in ${(k)timings:#(end|$key)}; do
    float delta
    (( delta = $timings[$key] - $timings[$other] ))
    (( smallest = delta > 0.00000000001 && delta < smallest ? delta : smallest ))
  done
  printf "%s: %.3f\n" $key smallest
done | sort -k 2rn
printf "total: %.3f\n" $(($timings[end] - $timings[start]))
unset timings key other
