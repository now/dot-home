# contents: The “now” prompt definition.
#
# Copyright © 2002,2003,2004,2007 Nikolai Weibull <now@bitwi.se>

# prompt_now_help {{{1
#
# Called by PROMPT when help for this theme is requested.
prompt_now_help () {
  cat <<EOH
This prompt is color-scheme-able.  You can invoke it thusly:

  prompt now COLOR...

The colors’ uses and default values are

COLOR   Use         Default
---------------------------
1       items       default
2       separators  yellow
3       item names  blue
4       messages    green
5       warnings    red
6       success     bright green
7       error       bright red
8       background  white
9       colons      default
EOH
}

integer PSCOL=-1

# prompt_now_setup {{{1
#
# Called by PROMPT when the theme is selected.
prompt_now_setup () {
  emulate -L zsh
  setopt extendedglob nolocaltraps
  prompt_opts=(cr percent subst)

  prompt_now_teardown

  # Set up color arrays.  C contains the raw color sequences, while D contains
  # %{…%}-surrounded entries for prompts that need to determine the width of
  # the prompt.
  declare -a default_colors d
  default_colors=(default yellow blue green red green red white default)
  set -- $* $default_colors[$#,-1]
  d=($fg[$1] $fg[$2] $fg[$3] $fg[$4] $fg[$5] $fg_bold[$6] $fg_bold[$7] $bg[$8] $bg[$9])
  d=('%{'$^d'%}')

  local r="%{$reset_color%}"

  s="$d[9]:$r"

  prompt_now_tag () { print -- ${*/(#b)(*):(*):(*):(*)/$d[$match[1]]$match[2]$r$s $d[$match[3]]$match[4]$r} }

  prompt_now_item () { print -- $(prompt_now_tag ${*/(#b)(*):(*)/3:$match[1]:1:$match[2]}) }

  # TODO: Should display user’s PSVARs?

  declare -a e
  if [[ $(stty 2> /dev/null) == *iutf8* ]]; then
    e=('…' '———' '———' '“' '”')
  else
    e=('...' '---' '---' '"' '"')
  fi

  prompt_now_line () {
    print -- "$d[2]:::$r $* $d[2]:::$r"
  }

  prompt_now_pair () {
    if (( $# == 5 )); then
      print -- $d[$1]$2$r$s $d[$4]$5$r
    else
      print -- $d[3]$1$r$s $d[1]$2$r
    fi
  }

  prompt_now_pairs () {
    local sep=" $d[2]::$r "
    local i='([^:]##)'; local p=$i:$i
    eval "local middle=\${(pj:${sep//:/\\072}:)\${*/(#b)(#s)$p(:$p)#(#e)/\$(prompt_now_pair $ary \$match)}}"
    prompt_now_line $middle
  }

  prompt_now_clean_pairs () {
    print -- ${$(prompt_now_pairs $*)//(%{|%})}
  }

  eval "$(<<EOF
    prompt_now_precmd () {
      (( COLUMNS == PSCOL )) && return
      (( PSCOL = COLUMNS ))

      prompt_now_setup_dir () {
        line_1="$(prompt_now_pairs dir:\$path_component user:%n@%m)"
      }

      local line_1 line_2 path_component
      integer columns_left
      prompt_now_setup_dir
      line_1=\${line_1//\%{[^%]#%}}
      (( columns_left = COLUMNS - \${(c)#\$(print -P -- \$line_1)} ))
      path_component="%\$columns_left<$e[1]<%(25~|$e[1]/|)%24~%<<"
      prompt_now_setup_dir
      unfunction prompt_now_setup_dir

      line_2="%(?..$(prompt_now_pairs '3:err:7:%?')$prompt_newline)"

      PS1="\$line_1$prompt_newline\$line_2"

      zstyle ':completion:*:default' list-prompt \
        "$d[8]$e[2] More $e[3]\${(l:\$((COLUMNS - ${#:-'$e[2] More $e[3]page: Top'})):)}page: %p$r"
    }
EOF)"
  precmd_functions+=(prompt_now_precmd)

  PS2='${(l:$((2 * (${(w)#$(print -P %_)} - 1))):)}'
  PS3="$d[1]Your selection$r: "
  PS4="$d[2]+$r$d[3]%N$r:$d[1]%i$r: "

  SPROMPT="zsh: correct $e[4]$d[7]%R$r$e[5] to $e[4]$d[6]%r$r$e[5]? "

  TIMEFMT=$(prompt_now_clean_pairs job:%J)$'\n'$(prompt_now_clean_pairs 'real:%*E' 'user:%*U' 'system:%*S (%P)')

  WATCHFMT=$(prompt_now_clean_pairs '%(a.logon.logoff):%n (%M)' tty:%l 'time:%T (%D)')

  local mail="$(prompt_now_clean_pairs 'new:\$_')"
  (( $#mailpath > 0 )) && mailpath=(${mailpath%?*}$^mail)

  zstyle ':completion:*:descriptions' format "$(prompt_now_line %d)"
  zstyle ':completion:*:messages' format "$d[4]%d$r"
  zstyle ':completion:*:warnings' format "$d[5]no matches for %d$r"
  zstyle ':completion:*:corrections' format "$(prompt_now_line %d \($d[3]errors$r$s $d[7]%e$r\))"

  unfunction prompt_now_clean_pairs prompt_now_pairs prompt_now_line

  functions[TRAPWINCH]="${functions[TRAPWINCH]//$'\n'    prompt_now_winch}
    prompt_now_winch"
}

# }}}1

prompt_now_teardown () {
  if (( $+functions[prompt_now_precmd] )); then
    precmd_functions[(I)prompt_now_precmd]=()
    unfunction prompt_now_precmd
  fi
  functions[TRAPWINCH]="${functions[TRAPWINCH]//$'\n'    prompt_now_winch}"
}

prompt_now_winch () {
  prompt_now_precmd
  zle && zle reset-prompt
}

prompt_now_preview () {
  local +h PS1='%# '
  prompt_preview_theme now "$@"
}

[[ -o kshautoload ]] || prompt_now_setup "$@"

# vim: ft=zsh
