#! @ZSHELL@

application=$(basename $0)
useragent="discogs-tags/1.0 +http://disu.se"

EXIFTOOL=@EXIFTOOL@

die () {
  print -r -- $application: $*
  exit 1
}

usage () {
  print -r -- "Usage: $application [-n] [-i] DIRECTORY ID"
  exit 1
}

json () {
  print -r $1 | jq -r $2
}

json-array () {
  set -A $1 ${(f)"$(json $2 $3)"}
}

json-array-with-substituted-marks () {
  json-array $1 $2 $3
  substitute-marks-array $1
}

json-artist-array () {
  json-array-with-substituted-marks $1 $2 "if $3 | length > 1 then ($3[0:-1]|map(.name,.join))+[$3[-1].name] | join(\" \") else empty end,($3[]|.name)"
}

substitute-marks-array () {
  local -a result
  for e in ${(P)1}; do
    result+=$(substitute-marks $e)
  done
  set -A $1 $result
}

substitute-marks () {
  print -r -- ${${${*//\'/’}//(#b)\"([^\"]#)\"/“$match[1]”}/\"/″}
}

clean-name () {
  local -a match mbegin mend

  print -r -- ${${${${${${${${(L):-$*}//[\/]/-}//(#b)[[:space:]]#\(([^\)]#)\)/-$match[1]}/ & / and }/&/ and }// /_}//[?!]}//.../…}
}

differentimages=0
local -A images
json-image () {
  local uri=
  case $2 in
    (primary)
      uri=$(json $1 '.images[0].uri//empty')
      ;;
    (secondary)
      uri=$(json $1 '.images[1].uri//empty')
      ;;
  esac
  if [[ -n $uri ]]; then
    local image=; image=$(mktemp dti.XXXXXX) || exit 1
    trap 'rm -f $images; exit 130' INT
    trap 'rm -f $images; exit 143' TERM
    curl -L --compressed --silent --show-error --user-agent $useragent -H $authorization $uri > $image || { rm -f $image; exit 1 }
    local format=; format=$($EXIFTOOL -p '$FileType' $image) || exit 1
    if [[ format != (JPEG|PNG) ]]; then
      local jpeg=; jpeg=$(mktemp dti.jpeg.XXXXXX) || { rm -f $image; exit 1 }
      convert $image jpg:- > $jpeg || { rm -f $image $jpeg; exit 1 }
      rm -f $image
      image=$jpeg
    fi
    images[$2]=$image
  elif [[ $2 = primary ]]; then
    die 'missing primary image; upload one'
  fi
}

precmd=
checkcount=1
checkpositions=1

while :; do
  case $1 in
    (-n)
      precmd='print -r --'
      ;;
    (-i)
      differentimages=1
      ;;
    (-c)
      checkcount=0
      ;;
    (-p)
      checkpositions=0
      ;;
    (--)
      break
      ;;
    (-*)
      die 'invalid option: ' $1
      ;;
    (*)
      break;;
  esac
  shift
done

(( $# == 2 )) || usage
directory=$1
[[ -d $directory ]] || die 'no such file or directory: ' $directory
id=${2/http:\/\/(www.|)discogs.com\/([^\/]##\/|)release\/}
TOKENFILE=~/.config/discogs-tags/.token
token=$(cat $TOKENFILE)
[[ -n $token ]] || die "$TOKENFILE missing or empty"
authorization="Authorization: Discogs token=$token"
release=$(curl --compressed --silent --user-agent $useragent -H $authorization https://api.discogs.com/releases/$id)
if [[ -z $release ]]; then
  die 'can’t access Discogs API'
fi
error=$(json $release .message//empty)
if [[ -n $error ]]; then
  die $error
fi

json-artist-array albumartists $release .artists
album=$(substitute-marks $(json $release .title))
json-array-with-substituted-marks labels $release '.labels[].name'
json-array catalognumbers $release '.labels[].catno'
released=$(json $release .released)
location=$(json $release .country)
json-array genres $release '.styles[]'
json-array positions $release '.tracklist[]|select(.type_=="track").position'
json-array-with-substituted-marks titles $release '.tracklist[]|select(.type_=="track").title'
json-image $release primary
(( differentimages )) && json-image $release secondary

files=($directory/*.flac(Nn))
if (( checkcount && $#files != $#positions )); then
  die $(printf 'number of files in directory doesn’t match number of tracks at Discogs: %d != %d: %s: %s' $#files $#positions $directory http://www.discogs.com/release/$id)
fi

if (( checkpositions )); then
  illegalpositions=${positions:#[A-Za-z]([1-9][0-9]#|)}
  if (( $#illegalpositions > 0 )); then
    die $(printf 'some track positions don’t contain side information on Discogs: %s: %s' $position http://www.discogs.com/release/$id $illegalpositions)
  fi

  for (( i = 1; i <= $#files; i++ )); do
    local pos=${${${${${files[i]}:t:r}##[0-9][0-9][0-9][0-9]##-}/-0}/-}
    if [[ $pos != (#i)$positions[i] ]] &&
       { [[ $pos != (#i)[a-z] ]] || [[ ${pos}1 != (#i)$positions[i] ]] }; then
      die $(printf 'track position of file doesn’t match that of track on Discogs: %s !~ %s: %s: %s' $pos $positions[i] $files[i] http://www.discogs.com/release/$id)
    fi
  done
fi

# TODO: Allow user to set COMMENT?
# TODO: Allow user to set INITIALKEY?
# TODO: Allow user to set RATING WMP?
#
# TODO: SOURCEMEDIA=/resp/release/formats/format/@name|/resp/release/formats/format/descriptions/description
#
# NOTE: Traktor uses YEAR for the Released field, but, of course, only the year
# part.
# TODO: We could have used DISCNUMBER+TRACKNUMBER to convert A1 to 1+1, but
# Traktor doesn’t support DISCNUMBER.
[[ -n $(json $release '.tracklist[].artists[]?.name') ]] && trackartists=y
if [[ -z $trackartists ]]; then
  artists=($albumartists)
  albumartists=()
fi
nmdbid=${${directory:t}%%[^0-9]*}
local -a mixartists
json-artist-array mixartists $release '(.extraartists[]|select(.role=="Remix" or .role=="Edited By"))'
[[ -n $(json $release '.tracklist[].extraartists[]?|select(.role=="Remix" or .role=="Edited By").name') ]] && trackmixartists=y
for (( i = 1; i <= $#files; i++ )); do
  if [[ -n $trackartists ]]; then
    json-artist-array artists $release "(.tracklist[]|select(.position==\"$positions[i]\").artists)"
    if (( $#artists == 0 )); then
      artists=($albumartists)
    fi
  fi
  if [[ -n $trackmixartists ]]; then
    json-artist-array mixartists $release "(.tracklist[]/select(.position==\"$positions[i]\").extraartists[]|select(.role==\"Remix\" or .role==\"Edited By\"))"
  fi
  local image=
  (( differentimages )) && [[ $positions[i] != [aA]* ]] && image=$images[secondary]
  [[ -z $image ]] && image=$images[primary]
  $=precmd metaflac \
    --remove-tag=ALBUMARTIST \
    --remove-tag=ALBUM \
    --remove-tag=ORGANIZATION \
    --remove-tag=CATALOGNUMBER \
    --remove-tag=DATE \
    --remove-tag=YEAR \
    --remove-tag=LOCATION \
    --remove-tag=GENRE \
    --remove-tag=TRACKNUMBER \
    --remove-tag=POSITION \
    --remove-tag=ARTIST \
    --remove-tag=TITLE \
    --remove-tag=MIXARTIST \
    --remove-tag="DISCOGS RELEASE ID" \
    --remove-tag="NMDB ID" \
    --add-replay-gain \
    --set-tag=ALBUMARTIST=${^albumartists} \
    --set-tag=ALBUM=$album \
    --set-tag=ORGANIZATION=${^labels} \
    --set-tag=CATALOGNUMBER=${^catalognumbers} \
    --set-tag=DATE=$released \
    --set-tag=YEAR=$released \
    --set-tag=LOCATION=$location \
    --set-tag=GENRE=${^genres} \
    --set-tag=TRACKNUMBER=$i \
    --set-tag=POSITION=$positions[i] \
    --set-tag=ARTIST=${^artists} \
    --set-tag=TITLE=$titles[i] \
    --set-tag=MIXARTIST=${^mixartists} \
    --set-tag="DISCOGS RELEASE ID=$id" \
    --set-tag="NMDB ID=$nmdbid" \
    ${image:+--import-picture-from=$image} \
    $files[i]
  local flac=$files[i]:h/$(clean-name $positions[i]-${trackartists:+$artists[1]-}$titles[i]).flac
  [[ $files[i] -ef $flac ]] || $=precmd mv $files[i] $flac
done
local fulldirectory=$directory:h/$nmdbid-$(clean-name ${albumartists[1]:-$artists[1]}-$album)
[[ $directory -ef $fulldirectory ]] || $=precmd mv $directory $fulldirectory
rm -f $images
