SHELL = /bin/sh

abs_builddir = @abs_builddir@
abs_srcdir = @abs_srcdir@
srcdir = @srcdir@

VPATH = @srcdir@

CURL = @CURL@
DIFF = @DIFF@
DTACH = @DTACH@
EMACS = @EMACS@
EMACSCLIENT = @EMACSCLIENT@
EXIFTOOL = @EXIFTOOL@
GREP = @GREP@
GZIP = @GZIP@
ICONV = @ICONV@
INSTALL = @INSTALL@
KEYCHAIN = @KEYCHAIN@
LAUNCHCTL = @LAUNCHCTL@
MKDIR_P = @MKDIR_P@
PATCH = @PATCH@
UNZIP = @UNZIP@
ZSHELL = @ZSHELL@

empty :=
space := $(empty) $(empty)
shell_quote = $(subst $(space),\ ,$(1))

DEFAULT_VERBOSITY = 0

V_at = $(_v_at_$(V))
_v_at_ = $(_v_at_$(DEFAULT_VERBOSITY))
_v_at_0 = @
_v_at_1 =

V_GEN = $(_v_GEN_$(V))
_v_GEN_ = $(_v_GEN_$(DEFAULT_VERBOSITY))
_v_GEN_0 = @echo "  GEN       " $@;
_v_GEN_1 =

V_GZIP = $(_v_GZIP_$(V))
_v_GZIP_ = $(_v_GZIP_$(DEFAULT_VERBOSITY))
_v_GZIP_0 = @echo "  GZIP      " $@;
_v_GZIP_1 =

V_CURL = $(_v_CURL_$(V))
_V_CURL_ = $(_v_CURL_$(DEFAULT_VERBOSITY))
_V_CURL_0 = @echo "  CURL      " $@;
_v_CURL_1 =

V_MKDIR_P = $(_v_MKDIR_P_$(V))
_v_MKDIR_P_ = $(_v_MKDIR_P_$(DEFAULT_VERBOSITY))
_v_MKDIR_P_0 = @echo "  MKDIR     " $@;
_v_MKDIR_1 =

V_PATCH = $(_v_PATCH_$(V))
_v_PATCH_ = $(_v_PATCH_$(DEFAULT_VERBOSITY))
_v_PATCH_0 = @echo "  PATCH     " $@;
_v_PATCH_1 =

V_INSTALL = $(_v_INSTALL_$(V))
_v_INSTALL_ = $(_v_INSTALL_$(DEFAULT_VERBOSITY))
_v_INSTALL_0 = @echo "  INSTALL   " $@;
_v_INSTALL_1 =

V_LAUNCHCTL = $(_v_LAUNCHCTL_$(V))
_v_LAUNCHCTL_ = $(_v_LAUNCHCTL_$(DEFAULT_VERBOSITY))
_v_LAUNCHCTL_0 = @echo "  LAUNCHCTL " $@;
_v_LAUNCHCTL_1 =

V_ELC = $(_v_ELC_$(V))
_v_ELC_ = $(_v_ELC_$(DEFAULT_VERBOSITY))
_v_ELC_0 = @echo "  ELC       " $@;
_v_ELC_1 =

V_UNZIP = $(_v_UNZIP_$(V))
_v_UNZIP_ = $(_v_UNZIP_$(DEFAULT_VERBOSITY))
_v_UNZIP_0 = @echo "  UNZIP     " $@;
_v_UNZIP_1 =

prefix = @prefix@
bindir = $(prefix)/opt/bin
libexecdir = $(prefix)/opt/libexec
projectsdir = @projectsdir@
sharedir = $(prefix)/opt/share
userconfdir = $(prefix)
XDG_CONFIG_CACHE = @XDG_CONFIG_CACHE@
XDG_CONFIG_HOME = @XDG_CONFIG_HOME@
userconfaudacitydir = $(userconfdir)/.audacity
userconfemacsddir = $(userconfdir)/.emacs.d
userconfemacsdetcschemadir = $(userconfemacsddir)/etc/schema
userconfemacsdinitsdir = $(userconfemacsddir)/inits
userconfemacsdsitelispdir = $(userconfemacsddir)/site-lisp
userconfmixxxdir = $(userconfdir)/.mixxx
userconfmixxxcontrollersdir = $(userconfmixxxdir)/controllers
userconfmixxxskinsdir = $(userconfmixxxdir)/skins
userconfmixxxskinsroedir = $(userconfmixxxskinsdir)/Roe
userconfopenofficeorg3userwordbookdir = $(userconfdir)/.openoffice.org/3/user/wordbook
xdgconfighomedir = $(XDG_CONFIG_HOME)
xdgconfighomecmusdir = $(xdgconfighomedir)/cmus
xdgconfighomefontconfigdir = $(xdgconfighomedir)/fontconfig
xdgconfighomegitdir = $(xdgconfighomedir)/git
xdgconfighomevlcdir = $(xdgconfighomedir)/vlc
xdgconfighomezshdir = $(xdgconfighomedir)/zsh
xdgconfighomezshfunctionsdir = $(xdgconfighomezshdir)/functions
sysconfdir = /etc

dtachsessiondir = @dtachsessiondir@
dtachsession = @dtachsession@

zshistorydir = @zshistorydir@
zshistory = @zshistory@

.SUFFIXES:

.PHONY: all diff install

all: diff

$(srcdir)/configure: configure.ac
	$(V_GEN)cd $(srcdir) && autoconf

Makefile: Makefile.in config.status
	$(V_GEN)./config.status $(if $(V_GEN),-q)

config.status: configure
	$(V_GEN)./config.status --recheck $(if $(V_GEN),-q)

# patch, target
define PATCH_template_file
.PHONY: $(2:.patch=)
$(2:.patch=):
	$$(V_PATCH)if $$(PATCH) -Nsg 0 --dry-run $$@ $(1) > /dev/null; then \
	  $$(PATCH) -Nsg 0 $$@ $$(srcdir)/$(1); \
	fi

endef

# patches, parent-directory, prefix, prefix-to-strip
PATCH_template = $(eval $(foreach file,$(1),$(call PATCH_template_file,$(file),$(2)/$(3)$(file:$(4)%=%))))

INSTALLFLAGS = -p
INSTALL_DATA = $(INSTALL) $(INSTALLFLAGS) -m 0644
INSTALL_PROGRAMS = $(INSTALL) $(INSTALLFLAGS)
INSTALL_SCRIPTS = $(INSTALL_PROGRAMS)

# dir
define DIR_dir
$(1):
	$$(V_MKDIR_P)$$(MKDIR_P) $$(call shell_quote,$$@)

endef

# file, target, dir, primary, rules?
define DIR_primary
.PHONY diff: $(2).diff
$(2).diff:
	@$$(DIFF) -u $(2) $$(srcdir)/$(1) || true

install: $(2)

$(2): | $(3)

$(2): $(1)
	$$(V_INSTALL)$$(INSTALL_$(4)) $$< $$(call shell_quote,$$@)
ifneq ($(5),)
	$(5)
endif

endef

# dir, prefix?, rules?
DIR = $(eval $(call DIR_dir,$(DESTDIR)$($(1)dir)) $(foreach primary,DATA SCRIPTS,$(foreach file,$($(1)_$(primary)),$(call DIR_primary,$(file),$(DESTDIR)$($(1)dir)/$(2)$(notdir $(file)),$(DESTDIR)$($(1)dir),$(primary),$(3)))))

%/.dirstamp:
	$(V_at)$(MKDIR_P) $*
	$(V_at): > $@

%.elc: %.el emacs.d/inits/package.el | emacs.d/site-lisp/userloaddefs.el
	$(V_ELC)$(EMACS) --batch -q -L $(srcdir)/emacs.d/site-lisp \
	  -l $(srcdir)/emacs.d/inits/package.el \
	  -l emacs.d/site-lisp/userloaddefs.el \
	  --eval "(setq byte-compile-dest-file-function (lambda (file) \"$@\"))" \
	  $(ELCFLAGS) -f batch-byte-compile $<

%.el.gz: %.el
	$(V_GZIP)$(GZIP) -9n < $< > $@.tmp
	$(V_at)mv $@.tmp $@

DEJAVU_FONTS_VERSION = 2.37
dejavu_fonts_ttf_version = dejavu-fonts-ttf-$(DEJAVU_FONTS_VERSION)
dejavu_fonts_ttf_version_zip = dejavu-fonts-ttf-$(DEJAVU_FONTS_VERSION).zip

fontsdejavu_DATA = \
	fonts/dejavu/DejaVuSans-Bold.ttf \
	fonts/dejavu/DejaVuSans-BoldOblique.ttf \
	fonts/dejavu/DejaVuSans-ExtraLight.ttf \
	fonts/dejavu/DejaVuSans-Oblique.ttf \
	fonts/dejavu/DejaVuSans.ttf \
	fonts/dejavu/DejaVuSansCondensed-Bold.ttf \
	fonts/dejavu/DejaVuSansCondensed-BoldOblique.ttf \
	fonts/dejavu/DejaVuSansCondensed-Oblique.ttf \
	fonts/dejavu/DejaVuSansCondensed.ttf \
	fonts/dejavu/DejaVuSansMono-Bold.ttf \
	fonts/dejavu/DejaVuSansMono-BoldOblique.ttf \
	fonts/dejavu/DejaVuSansMono-Oblique.ttf \
	fonts/dejavu/DejaVuSansMono.ttf \
	fonts/dejavu/DejaVuSerif-Bold.ttf \
	fonts/dejavu/DejaVuSerif-BoldItalic.ttf \
	fonts/dejavu/DejaVuSerif-Italic.ttf \
	fonts/dejavu/DejaVuSerif.ttf \
	fonts/dejavu/DejaVuSerifCondensed-Bold.ttf \
	fonts/dejavu/DejaVuSerifCondensed-BoldItalic.ttf \
	fonts/dejavu/DejaVuSerifCondensed-Italic.ttf \
	fonts/dejavu/DejaVuSerifCondensed.ttf

fonts/$(dejavu_fonts_ttf_version_zip): fonts/.dirstamp
	$(V_CURL)$(CURL) -Ls \
	  http://sourceforge.net/projects/dejavu/files/dejavu/$(DEJAVU_FONTS_VERSION)/$(dejavu_fonts_ttf_version_zip) > $@.tmp
	$(V_at)mv $@.tmp $@

$(fontsdejavu_DATA): fonts/$(dejavu_fonts_ttf_version_zip) fonts/dejavu/.dirstamp
	$(V_UNZIP)$(UNZIP) -qop $< $(dejavu_fonts_ttf_version)/ttf/$(@F) > $@

HUNSPELL_DICT_VERSION = 2014.08.11
HUNSPELL_EN_GB_DICT_ZIP = hunspell/hunspell-en_GB-ise-$(HUNSPELL_DICT_VERSION).zip
HUNSPELL_EN_US_DICT_ZIP = hunspell/hunspell-en_US-$(HUNSPELL_DICT_VERSION).zip

$(HUNSPELL_EN_GB_DICT_ZIP) $(HUNSPELL_EN_US_DICT_ZIP): hunspell/.dirstamp
	$(V_CURL)$(CURL) -Ls http://downloads.sourceforge.net/wordlist/$(@F) > $@.tmp
	$(V_at)mv $@.tmp $@

hunspell/%.aff: hunspell/hunspell-%-$(HUNSPELL_DICT_VERSION).zip hunspell/.dirstamp
	$(V_GEN)$(UNZIP) -qod $(@D) $< $(@F)
	$(V_at)$(ICONV) -f iso-8859-1 -t utf-8 $@ > $@.tmp
	$(V_at)mv $@.tmp $@
	$(V_at)$(PATCH) -sp0 $@ < $(srcdir)/$@.patch

hunspell/%.dic: hunspell/hunspell-%-$(HUNSPELL_DICT_VERSION).zip hunspell/.dirstamp
	$(V_GEN)$(UNZIP) -qod $(@D) $< $(@F)
	$(V_at)$(ICONV) -f iso-8859-1 -t utf-8 $@ > $@.tmp
	$(V_at)sed -e "s/'/’/g" $@.tmp > $@.tmp.tmp
	$(V_at)mv $@.tmp.tmp $@.tmp
	$(V_at)mv $@.tmp $@

HUNSPELL_SV_DICT_ZIP = hunspell/addon-474623-latest.xpi

$(HUNSPELL_SV_DICT_ZIP): hunspell/.dirstamp
	$(V_CURL)$(CURL) -Ls https://addons.mozilla.org/firefox/downloads/latest/474623/$(@F) > $@.tmp
	$(V_at)mv $@.tmp $@

hunspell/sv.aff: $(HUNSPELL_SV_DICT_ZIP) hunspell/.dirstamp
	$(V_GEN)$(UNZIP) -qojd $(@D) $< dictionaries/$(@F)
	$(V_at)touch $@

hunspell/sv.dic: $(HUNSPELL_SV_DICT_ZIP) hunspell/.dirstamp
	$(V_GEN)$(UNZIP) -qojd $(@D) $< dictionaries/$(@F)
	$(V_at)sed -e "s/'/’/g" $@ > $@.tmp
	$(V_at)mv $@.tmp $@

userconf_DATA = \
	editrc \
	gemrc \
	gtkrc-2.0 \
	hunspell_en_US \
	hunspell_sv \
	indent.pro \
	inputrc \
	mailcap \
	mbsyncrc \
	zshenv

userconfaudacity_DATA = \
	audacity.cfg

userconfemacsd_DATA = \
	emacs.d/init.elc \
	emacs.d/now-theme.elc

userconfemacsdetcschema_DATA = \
	emacs.d/etc/schema/catalog.rnc \
	emacs.d/etc/schema/gtk-builder.rnc \
	emacs.d/etc/schema/mixxx-midi-controller-preset.rnc \
	emacs.d/etc/schema/mixxx-skin.rnc \
	emacs.d/etc/schema/mixxx-template.rnc \
	emacs.d/etc/schema/PropertyList-1.0.rnc \
	emacs.d/etc/schema/schemas.xml

emacs.d/etc/schema/schemas.xml: emacs.d/etc/schema/.dirstamp

init_elcs = \
	emacs.d/inits/package.elc \
	emacs.d/inits/provided-delayed-inits.elc

userconfemacsdinits_DATA = \
	$(init_elcs)

sitelisp_elcs = \
	emacs.d/site-lisp/autotest-mode.elc \
	emacs.d/site-lisp/buff-menu-ext.elc \
	emacs.d/site-lisp/evil-paredit.elc \
	emacs.d/site-lisp/hide-mode-line.elc \
	emacs.d/site-lisp/now-cc-mode.elc \
	emacs.d/site-lisp/now-evil.elc \
	emacs.d/site-lisp/now-git.elc \
	emacs.d/site-lisp/now-gxref.elc \
	emacs.d/site-lisp/now-hideshow.elc \
	emacs.d/site-lisp/now-init.elc \
	emacs.d/site-lisp/now-mu4e.elc \
	emacs.d/site-lisp/now-org-agenda.elc \
	emacs.d/site-lisp/now-org-clock.elc \
	emacs.d/site-lisp/now-org-colview.elc \
	emacs.d/site-lisp/now-org.elc \
	emacs.d/site-lisp/now-ruby.elc \
	emacs.d/site-lisp/now-simple.elc \
	emacs.d/site-lisp/now-smie.elc \
	emacs.d/site-lisp/rnc-mode.elc \
	emacs.d/site-lisp/use-package-evil-bind.elc \
	emacs.d/site-lisp/velocity-mode.elc

userconfemacsdsitelisp_DATA = \
	$(sitelisp_elcs) \
	$(sitelisp_elcs:%.elc=%.el.gz) \
	emacs.d/site-lisp/userloaddefs.el

userconfmixxx_DATA = \
	mixxx/mixxx.cfg

userconfmixxxcontrollers_DATA = \
	mixxx/controllers/XONEK2.midi.js \
	mixxx/controllers/XONEK2.midi.xml

userconfmixxxskinsroe_DATA = \
	mixxx/skins/Roe/deck-overview.xml \
	mixxx/skins/Roe/deck-visual.xml \
	mixxx/skins/Roe/skin.xml \
	mixxx/skins/Roe/style-branch-closed.svg \
	mixxx/skins/Roe/style-branch-open.svg \
	mixxx/skins/Roe/style-down-arrow.svg \
	mixxx/skins/Roe/style-indicator-checked.svg \
	mixxx/skins/Roe/style-indicator-unchecked.svg \
	mixxx/skins/Roe/style-library-preview-pause.svg \
	mixxx/skins/Roe/style-library-preview-play.svg \
	mixxx/skins/Roe/style-radio-button-checked.svg \
	mixxx/skins/Roe/style-radio-button-unchecked.svg \
	mixxx/skins/Roe/style-up-arrow.svg \
	mixxx/skins/Roe/style.qss \
	mixxx/skins/Roe/vumeter-latency.svg

userconfopenofficeorg3userwordbook_DATA = \
	hunspell/en_GB-ise.aff \
	hunspell/en_GB-ise.dic \
	hunspell/en_US.aff \
	hunspell/en_US.dic \
	hunspell/sv.aff \
	hunspell/sv.dic

xdgconfighome_DATA = \
	rss2email.cfg

xdgconfighomecmus_DATA = \
	cmus/now.theme \
	cmus/rc

xdgconfighomefontconfig_DATA = \
	fonts.conf

xdgconfighomegit_DATA = \
	git/config

xdgconfighomevlc_DATA = \
	vlcrc

xdgconfighomezsh_DATA = \
	zsh/zlogin \
	zsh/zprofile \
	zsh/zshrc

xdgconfighomezshfunctions_DATA = \
	zsh/functions/_unpack \
	zsh/functions/_up \
	zsh/functions/hc \
	zsh/functions/up \
	zsh/functions/dynamic-directory-names \
	zsh/functions/zle/cd-to-alternate-directory \
	zsh/functions/zle/foreground-or-list-choices \
	zsh/functions/zle/up-directory \
	zsh/functions/zle/vi-cmd-mode-silently

bin_SCRIPTS = \
	bin/a \
	bin/aa \
	bin/asciitable \
	bin/burn \
	bin/clipboard \
	bin/create-key \
	bin/discogs-tags \
	bin/duh \
	bin/e \
	bin/g \
	bin/im \
	bin/index-disc \
	bin/m \
	bin/mfedit \
	bin/mov-re-encode \
	bin/o \
	bin/oo \
	bin/pack \
	bin/terminal-colors \
	bin/unpack \
	bin/valgrind-ruby

libexec_SCRIPTS = \
	libexec/clipboard-get \
	libexec/clipboard-put

include os/os.mk
include host/host.mk

ifdef INCLUDE_VIM
userconf_DATA += \
	vim/after/ftplugin/sh.vim \
	vim/after/ftplugin/vim.vim \
	vim/after/ftplugin/zsh.vim \
	vim/after/syntax/vim.vim \
	vim/colors/now.vim \
	vim/ftplugin/man.vim \
	vimrc
endif

$(bin_SCRIPTS): bin/.dirstamp
$(init_elcs): emacs.d/inits/.dirstamp
$(sitelisp_elcs): emacs.d/site-lisp/.dirstamp
$(userconfemacsd_DATA): emacs.d/.dirstamp
$(xdgconfighomezsh_DATA): zsh/.dirstamp

$(sitelisp_elcs): %.elc: %.el emacs.d/inits/package.el
	$(V_ELC)$(EMACS) --batch -q -L $(srcdir)/emacs.d/site-lisp \
	  -l $(srcdir)/emacs.d/inits/package.el \
	  --eval "(setq byte-compile-dest-file-function (lambda (file) \"$@\"))" \
	  $(ELCFLAGS) -f batch-byte-compile $<

# TODO Update these dependencies
emacs.d/delayed-inits/buff-menu.elc: emacs.d/site-lisp/buff-menu-ext.elc
emacs.d/delayed-inits/evil.elc: emacs.d/site-lisp/evil-paredit.elc \
	emacs.d/site-lisp/ned-info-on-file.elc
emacs.d/delayed-inits/org-agenda.elc: emacs.d/site-lisp/now-org.elc
emacs.d/delayed-inits/prog-mode.elc \
emacs.d/delayed-inits/tabulated-list.elc \
emacs.d/delayed-inits/text-mode.elc: emacs.d/site-lisp/now-init.elc
emacs.d/inits/user-interface.elc: emacs.d/site-lisp/hide-mode-line.elc

emacs.d/site-lisp/userloaddefs.el: \
	$(sitelisp_elcs) \
	emacs.d/site-lisp/.dirstamp \
	Makefile
	$(V_ELC)$(EMACS) --batch -q --eval '(setq vc-handled-backends nil)' \
	  --eval '(setq generated-autoload-file "$(abs_srcdir)/$@")' \
	  -f batch-update-autoloads $(srcdir)/emacs.d/site-lisp
	$(V_at)if test "$(srcdir)" != .; then mv $(srcdir)/$@ $@; fi
	$(V_at)touch $@

$(call DIR,bin)
$(call DIR,libexec)
$(call DIR,userconf,.)
$(call DIR,userconfaudacity)
ifneq ($(EMACS),)
$(call DIR,userconfemacsd)
$(call DIR,userconfemacsddelayedinits)
$(call DIR,userconfemacsdetcschema)
$(call DIR,userconfemacsdinits)
$(call DIR,userconfemacsdsitelisp)
endif
$(call DIR,userconfmixxx)
$(call DIR,userconfmixxxcontrollers)
$(call DIR,userconfmixxxskinsroe)
$(call DIR,userconfopenofficeorg3userwordbook)
$(call DIR,xdgconfighomecmus)
$(call DIR,xdgconfighomefontconfig)
$(call DIR,xdgconfighomegit)
$(call DIR,xdgconfighomevlc)
$(call DIR,xdgconfighomezsh,.)
$(call DIR,xdgconfighomezshfunctions)

emptydirs = \
	$(dtachsessiondir) \
	$(zshistorydir)

install: | $(emptydirs)

$(emptydirs):
	$(V_MKDIR_P)$(INSTALL) -d -m 0700 $@

%: %.in Makefile
	$(V_GEN)rm -f $@ $@.tmp && \
	  sed \
	    -e 's|@DTACH[@]|$(DTACH)|g' \
	    -e 's|@EMACS[@]|$(EMACS)|g' \
	    -e 's|@EMACSCLIENT[@]|$(EMACSCLIENT)|g' \
	    -e 's|@EXIFTOOL[@]|$(EXIFTOOL)|g' \
	    -e 's|@GREP[@]|$(GREP)|g' \
	    -e 's|@KEYCHAIN[@]|$(KEYCHAIN)|g' \
	    -e 's|@SHELL[@]|$(SHELL)|g' \
	    -e 's|@ZSHELL[@]|$(ZSHELL)|g' \
	    -e 's|@bindir[@]|$(bindir)|g' \
	    -e 's|@abs_builddir[@]|$(abs_builddir)|g' \
	    -e 's|@dtachsession[@]|$(dtachsession)|g' \
	    -e 's|@libexecdir[@]|$(libexecdir)|g' \
	    -e 's|@projectsdir[@]|$(projectsdir)|g' \
	    -e 's|@zshistory[@]|$(zshistory)|g' \
	    -e 's|@xdgconfighomezshdir[@]|$(xdgconfighomezshdir)|g' \
	    -e 's|@xdgconfighomezshfunctionsdir[@]|$(xdgconfighomezshfunctionsdir)|g' \
	    $< > $@.tmp && \
	  mv $@.tmp $@

DEPENDENCIES = \
	zap

environmentdir = Environment

install-dependencies:
	$(MKDIR_P) $(environmentdir) && \
	  for d in $(DEPENDENCIES); do \
	    ed=$(environmentdir)/$$d; \
	    if test -d $$ed; then \
	      (cd $$ed && git up && make install); \
	    else \
	      (git clone myhub:$$d.git $$ed && cd $$ed && make install); \
	    fi; \
	  done
