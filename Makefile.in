SHELL = /bin/sh

abs_srcdir = @abs_srcdir@
srcdir = @srcdir@

VPATH = @srcdir@

CURL = @CURL@
DIFF = @DIFF@
EMACS = @EMACS@
ICONV = @ICONV@
INSTALL = @INSTALL@
MKDIR_P = @MKDIR_P@
PATCH = @PATCH@
UNZIP = @UNZIP@
ZSHELL = @ZSHELL@

empty :=
space := $(empty) $(empty)
shell_quote = $(subst $(space),\ ,$(1))

DEFAULT_VERBOSITY = 0

V_at = $(_v_at_$(V))
_v_at_ = $(_v_at_$(DEFAULT_VERBOSITY))
_v_at_0 = @
_v_at_1 =

V_GEN = $(_v_GEN_$(V))
_v_GEN_ = $(_v_GEN_$(DEFAULT_VERBOSITY))
_v_GEN_0 = @echo "  GEN     " $@;
_v_GEN_1 =

V_CURL = $(_v_CURL_$(V))
_V_CURL_ = $(_v_CURL_$(DEFAULT_VERBOSITY))
_V_CURL_0 = @echo "  CURL    " $@;
_v_CURL_1 =

V_MKDIR_P = $(_v_MKDIR_P_$(V))
_v_MKDIR_P_ = $(_v_MKDIR_P_$(DEFAULT_VERBOSITY))
_v_MKDIR_P_0 = @echo "  MKDIR   " $@;
_v_MKDIR_1 =

V_PATCH = $(_v_PATCH_$(V))
_v_PATCH_ = $(_v_PATCH_$(DEFAULT_VERBOSITY))
_v_PATCH_0 = @echo "  PATCH   " $@;
_v_PATCH_1 =

V_INSTALL = $(_v_INSTALL_$(V))
_v_INSTALL_ = $(_v_INSTALL_$(DEFAULT_VERBOSITY))
_v_INSTALL_0 = @echo "  INSTALL " $@;
_v_INSTALL_1 =

V_ELC = $(_v_ELC_$(V))
_v_ELC_ = $(_v_ELC_$(DEFAULT_VERBOSITY))
_v_ELC_0 = @echo "  ELC     " $@;
_v_INSTALL_1 =

prefix = ~
bindir = $(prefix)/opt/bin
libexecdir = $(prefix)/opt/libexec
sharedir = $(prefix)/opt/share
userconfdir = $(prefix)
XDG_CONFIG_HOME ?= $(prefix)/.config
userconfaudacitydir = $(userconfdir)/.audacity
userconfemacsddir = $(userconfdir)/.emacs.d
userconfemacsddelayedinitsdir = $(userconfemacsddir)/delayed-inits
userconfemacsdetcschemadir = $(userconfemacsddir)/etc/schema
userconfemacsdinitsdir = $(userconfemacsddir)/inits
userconfemacsdsitelispdir = $(userconfemacsddir)/site-lisp
userconfmozillafirefoxdir = $(userconfdir)/.mozilla/firefox
userconfmozillafirefoxprofilesdefaultdir = $(userconfmozillafirefoxdir)/Profiles/default
userconfopenofficeorg3userwordbookdir = $(userconfdir)/.openoffice.org/3/user/wordbook
xdgconfighomedir = $(XDG_CONFIG_HOME)
xdgconfighomefontconfigdir = $(xdgconfighomedir)/fontconfig
xdgconfighomegitdir = $(xdgconfighomedir)/git
xdgconfighomevlcdir = $(xdgconfighomedir)/vlc
xdgconfighomezshdir = $(xdgconfighomedir)/zsh
xdgconfighomezshfunctionsdir = $(xdgconfighomezshdir)/functions
xdgconfighomezshhostdir = $(xdgconfighomezshdir)/host
xdgconfighomezshosdir = $(xdgconfighomezshdir)/os
sysconfdir = /etc

.SUFFIXES:

.PHONY: all diff install

all: diff

$(srcdir)/configure: configure.ac
	cd $(srcdir) && autoconf

Makefile: Makefile.in config.status
	./config.status

config.status: configure
	./config.status --recheck

# patch, target
define PATCH_template_file
.PHONY: $(2:.patch=)
$(2:.patch=):
	$$(V_PATCH)if $$(PATCH) -Nsg 0 --dry-run $$@ $(1) > /dev/null; then \
	  $$(PATCH) -Nsg 0 $$@ $$(srcdir)/$(1); \
	fi

endef

# patches, parent-directory, prefix, prefix-to-strip
PATCH_template = $(eval $(foreach file,$(1),$(call PATCH_template_file,$(file),$(2)/$(3)$(file:$(4)%=%))))

INSTALLFLAGS = -p
INSTALL_DATA = $(INSTALL) $(INSTALLFLAGS) -m 0644
INSTALL_PROGRAMS = $(INSTALL) $(INSTALLFLAGS)
INSTALL_SCRIPTS = $(INSTALL_PROGRAMS)

# dir
define DIR_dir
$(1):
	$$(V_MKDIR_P)$$(MKDIR_P) $$@

endef

# file, target, dir, primary
define DIR_primary
.PHONY diff: $(2).diff
$(2).diff:
	@$$(DIFF) -u $(2) $$(srcdir)/$(1) || true

install: $(2)

$(2): | $(3)

$(2): $(1)
	$$(V_INSTALL)$$(INSTALL_$(4)) $$< $$(call shell_quote,$$@)

endef

# dir, prefix?
DIR = $(eval $(call DIR_dir,$(DESTDIR)$($(1)dir)) $(foreach primary,DATA SCRIPTS,$(foreach file,$($(1)_$(primary)),$(if $(subst $(file),,$(lastword $(filter %/$(notdir $(file)),$($(1)_$(primary))))),,$(call DIR_primary,$(file),$(DESTDIR)$($(1)dir)/$(2)$(notdir $(file)),$(DESTDIR)$($(1)dir),$(primary))))))

%/.dirstamp:
	$(V_at)$(MKDIR_P) $*
	$(V_at): > $@

%.elc: %.el emacs.d/inits/package.el emacs.d/site-lisp/userloaddefs.el
	$(V_ELC)$(EMACS) --batch -Q -L $(srcdir)/emacs.d/site-lisp \
	  -l $(srcdir)/emacs.d/inits/package.el \
	  -l emacs.d/site-lisp/userloaddefs.el \
	  --eval "(setq byte-compile-dest-file-function (lambda (file) \"$@\"))" \
	  $(ELCFLAGS) -f batch-byte-compile $<

HUNSPELL_DICT_VERSION = 2014.08.11
HUNSPELL_EN_GB_DICT_ZIP = hunspell/hunspell-en_GB-ise-$(HUNSPELL_DICT_VERSION).zip
HUNSPELL_EN_US_DICT_ZIP = hunspell/hunspell-en_US-$(HUNSPELL_DICT_VERSION).zip

$(HUNSPELL_EN_GB_DICT_ZIP) $(HUNSPELL_EN_US_DICT_ZIP): hunspell/.dirstamp
	$(V_CURL)$(CURL) -Ls http://downloads.sourceforge.net/wordlist/$(@F) > $@

hunspell/%.aff: hunspell/hunspell-%-$(HUNSPELL_DICT_VERSION).zip hunspell/.dirstamp
	$(V_GEN)$(UNZIP) -qod $(@D) $< $(@F)
	$(V_at)$(ICONV) -f iso-8859-1 -t utf-8 $@ > $@.tmp
	$(V_at)mv $@.tmp $@
	$(V_at)$(PATCH) -sp0 $@ < $(srcdir)/$@.patch

hunspell/%.dic: hunspell/hunspell-%-$(HUNSPELL_DICT_VERSION).zip hunspell/.dirstamp
	$(V_GEN)$(UNZIP) -qod $(@D) $< $(@F)
	$(V_at)$(ICONV) -f iso-8859-1 -t utf-8 $@ > $@.tmp
	$(V_at)sed -e "s/'/’/g" $@.tmp > $@.tmp.tmp
	$(V_at)mv $@.tmp.tmp $@.tmp
	$(V_at)mv $@.tmp $@

HUNSPELL_SV_DICT_ZIP = hunspell/addon-474623-latest.xpi

$(HUNSPELL_SV_DICT_ZIP): hunspell/.dirstamp
	$(V_CURL)$(CURL) -Ls https://addons.mozilla.org/firefox/downloads/latest/474623/$(@F) > $@

hunspell/sv.aff: $(HUNSPELL_SV_DICT_ZIP) hunspell/.dirstamp
	$(V_GEN)$(UNZIP) -qojd $(@D) $< dictionaries/$(@F)
	$(V_at)touch $@

hunspell/sv.dic: $(HUNSPELL_SV_DICT_ZIP) hunspell/.dirstamp
	$(V_GEN)$(UNZIP) -qojd $(@D) $< dictionaries/$(@F)
	$(V_at)sed -e "s/'/’/g" $@ > $@.tmp
	$(V_at)mv $@.tmp $@

userconf_DATA = \
	editrc \
	gemrc \
	gtkrc-2.0 \
	hunspell_en_US \
	indent.pro \
	inputrc \
	mailcap \
	zshenv

userconfaudacity_DATA = \
	audacity.cfg

userconfemacsd_DATA = \
	emacs.d/init.elc \
	emacs.d/now-theme.elc

$(userconfemacsd_DATA): emacs.d/.dirstamp

provided_elcs = \
	emacs.d/delayed-inits/calc.elc \
	emacs.d/delayed-inits/calendar.elc \
	emacs.d/delayed-inits/cc-mode.elc \
	emacs.d/delayed-inits/compile.elc \
	emacs.d/delayed-inits/css-mode.elc \
	emacs.d/delayed-inits/desktop.elc \
	emacs.d/delayed-inits/diff.elc \
	emacs.d/delayed-inits/dired.elc \
	emacs.d/delayed-inits/dired-aux.elc \
	emacs.d/delayed-inits/evil.elc \
	emacs.d/delayed-inits/flx-ido.elc \
	emacs.d/delayed-inits/grep.elc \
	emacs.d/delayed-inits/hideshow.elc \
	emacs.d/delayed-inits/holidays.elc \
	emacs.d/delayed-inits/ido.elc \
	emacs.d/delayed-inits/ispell.elc \
	emacs.d/delayed-inits/lisp-mode.elc \
	emacs.d/delayed-inits/magit.elc \
	emacs.d/delayed-inits/make-mode.elc \
	emacs.d/delayed-inits/man.elc \
	emacs.d/delayed-inits/nxml-mode.elc \
	emacs.d/delayed-inits/org-agenda.elc \
	emacs.d/delayed-inits/org-capture.elc \
	emacs.d/delayed-inits/org-clock.elc \
	emacs.d/delayed-inits/org-colview.elc \
	emacs.d/delayed-inits/org-faces.elc \
	emacs.d/delayed-inits/org-id.elc \
	emacs.d/delayed-inits/org-mobile.elc \
	emacs.d/delayed-inits/org.elc \
	emacs.d/delayed-inits/recentf.elc \
	emacs.d/delayed-inits/rng-loc.elc \
	emacs.d/delayed-inits/ruby-mode.elc \
	emacs.d/delayed-inits/scroll-bar.elc \
	emacs.d/delayed-inits/sh-script.elc \
	emacs.d/delayed-inits/solar.elc \
	emacs.d/delayed-inits/tabulated-list.elc \
	emacs.d/delayed-inits/tramp-sh.elc

unprovided_elcs = \
	emacs.d/delayed-inits/buff-menu.elc

userconfemacsddelayedinits_DATA = \
	$(provided_elcs) \
	$(unprovided_elcs)

userconfemacsdetcschema_DATA = \
	emacs.d/etc/schema/catalog.rnc \
	emacs.d/etc/schema/gtk-builder.rnc \
	emacs.d/etc/schema/PropertyList-1.0.rnc \
	emacs.d/etc/schema/schemas.xml

init_elcs = \
	emacs.d/inits/package.elc \
	emacs.d/inits/provided-delayed-inits.elc \
	emacs.d/inits/unprovided-delayed-inits.elc \

userconfemacsdinits_DATA = \
	$(init_elcs)

sitelisp_elcs = \
	emacs.d/site-lisp/buff-menu-ext.elc \
	emacs.d/site-lisp/evil-paredit.elc \
	emacs.d/site-lisp/hide-mode-line.elc \
	emacs.d/site-lisp/ned-info-on-file.elc \
	emacs.d/site-lisp/now-org.elc \
	emacs.d/site-lisp/project.elc \
	emacs.d/site-lisp/rnc-mode.elc

userconfemacsdsitelisp_DATA = \
	$(sitelisp_elcs) \
	emacs.d/site-lisp/userloaddefs.el

userconfmozillafirefox_DATA = \
	firefox/profiles.ini

userconfmozillafirefoxprofilesdefault_DATA = \
	firefox/user.js

userconfopenofficeorg3userwordbook_DATA = \
	hunspell/en_GB-ise.aff \
	hunspell/en_GB-ise.dic \
	hunspell/en_US.aff \
	hunspell/en_US.dic \
	hunspell/sv.aff \
	hunspell/sv.dic

xdgconfighomefontconfig_DATA = \
	fonts.conf

xdgconfighomegit_DATA = \
	git/config

xdgconfighomevlc_DATA = \
	vlcrc

xdgconfighomezsh_DATA = \
	zsh/zlogin \
	zsh/zprofile \
	zsh/zshrc

xdgconfighomezshfunctions_DATA = \
	zsh/functions/_unpack \
	zsh/functions/_up \
	zsh/functions/freload \
	zsh/functions/hc \
	zsh/functions/up \
	zsh/functions/urlify \
	zsh/functions/dynamic-directory-names \
	zsh/functions/zle/cd-to-alternate-directory \
	zsh/functions/zle/foreground-or-list-choices \
	zsh/functions/zle/self-insert-redir \
	zsh/functions/zle/sudo-command-line \
	zsh/functions/zle/up-directory \
	zsh/functions/zle/urlify-current-argument \
	zsh/functions/zle/vi-cmd-mode-silently \
	zsh/functions/zle/yank-clipboard

bin_SCRIPTS = \
	bin/a \
	bin/aa \
	bin/asciitable \
	bin/burn \
	bin/clipboard \
	bin/create-key \
	bin/discogs-tags \
	bin/duh \
	bin/e \
	bin/g \
	bin/im \
	bin/index-disc \
	bin/m \
	bin/mfedit \
	bin/mov-re-encode \
	bin/o \
	bin/oo \
	bin/pack \
	bin/terminal-colors \
	bin/unpack \
	bin/valgrind-ruby

$(bin_SCRIPTS): bin/.dirstamp

libexec_SCRIPTS = \
	libexec/clipboard-get \
	libexec/clipboard-put

include os/os.mk
include host/host.mk

ifdef INCLUDE_VIM
userconf_DATA += \
	vim/after/ftplugin/sh.vim \
	vim/after/ftplugin/vim.vim \
	vim/after/ftplugin/zsh.vim \
	vim/after/syntax/vim.vim \
	vim/colors/now.vim \
	vim/ftplugin/man.vim \
	vimrc
endif

$(provided_elcs): ELCFLAGS = --eval "(require '$(basename $(notdir $@)))"

$(unprovided_elcs): ELCFLAGS = --eval '(load "$(basename $(notdir $@))" nil t)'

$(provided_elcs) $(unprovided_elcs): emacs.d/delayed-inits/.dirstamp

$(init_elcs): emacs.d/inits/.dirstamp

emacs.d/inits/provided-delayed-inits.el: $(provided_elcs) Makefile emacs.d/inits/.dirstamp
	$(V_GEN)echo "(dolist (feature '($(basename $(notdir $(provided_elcs))))) \
	  (eval-after-load feature \
	                   \`(load (concat user-emacs-directory \
	                                   \"delayed-inits/\" \
	                                   ,(symbol-name feature)))))" > $@

emacs.d/inits/unprovided-delayed-inits.el: $(unprovided_elcs) Makefile emacs.d/inits/.dirstamp
	$(V_GEN)echo "(dolist (feature '($(basename $(notdir $(unprovided_elcs))))) \
	  (eval-after-load (symbol-name feature) \
			   \`(load (concat user-emacs-directory \
	                                   \"delayed-inits/\" \
	                                   ,(symbol-name feature)))))" > $@

$(sitelisp_elcs): emacs.d/site-lisp/.dirstamp

$(sitelisp_elcs): %.elc: %.el emacs.d/inits/package.el
	$(V_ELC)$(EMACS) --batch -Q -L $(srcdir)/emacs.d/site-lisp \
	  -l $(srcdir)/emacs.d/inits/package.el \
	  --eval "(setq byte-compile-dest-file-function (lambda (file) \"$@\"))" \
	  $(ELCFLAGS) -f batch-byte-compile $<

emacs.d/site-lisp/userloaddefs.el: $(sitelisp_elcs) emacs.d/site-lisp/.dirstamp
	$(V_ELC)$(EMACS) --batch -Q --eval '(setq vc-handled-backends nil)' \
	  --eval '(setq generated-autoload-file "$(abs_srcdir)/$@")' \
	  -f batch-update-autoloads $(srcdir)/emacs.d/site-lisp
	$(V_at)if test "$(srcdir)" != .; then mv $(srcdir)/$@ $@; fi
	$(V_at)touch $@

$(call DIR,bin)
$(call DIR,libexec)
$(call DIR,userconf,.)
$(call DIR,userconfaudacity)
$(call DIR,userconfemacsd)
$(call DIR,userconfemacsddelayedinits)
$(call DIR,userconfemacsdetcschema)
$(call DIR,userconfemacsdinits)
$(call DIR,userconfemacsdsitelisp)
$(call DIR,userconfmozillafirefox)
$(call DIR,userconfmozillafirefoxprofilesdefault)
$(call DIR,userconfopenofficeorg3userwordbook)
$(call DIR,xdgconfighomefontconfig)
$(call DIR,xdgconfighomegit)
$(call DIR,xdgconfighomevlc)
$(call DIR,xdgconfighomezsh,.)
$(call DIR,xdgconfighomezshfunctions)
$(call DIR,xdgconfighomezshhost)
$(call DIR,xdgconfighomezshos)

%: %.in Makefile
	$(V_GEN)rm -f $@ $@.tmp && \
	  sed \
	    -e 's|@SHELL[@]|$(SHELL)|g' \
	    -e 's|@ZSHELL[@]|$(ZSHELL)|g' \
	    -e 's|@libexecdir[@]|$(libexecdir)|g' \
	    $< > $@.tmp && \
	  mv $@.tmp $@

DEPENDENCIES = \
	zap

environmentdir = Environment

install-dependencies:
	$(MKDIR_P) $(environmentdir) && \
	  for d in $(DEPENDENCIES); do \
	    ed=$(environmentdir)/$$d; \
	    if test -d $$ed; then \
	      (cd $$ed && git up && make install); \
	    else \
	      (git clone myhub:$$d.git $$ed && cd $$ed && make install); \
	    fi; \
	  done
